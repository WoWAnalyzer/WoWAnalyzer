{
  "blood.guide.death-strike.blood-shield": "Generate <0/>",
  "blood.guide.death-strike.blood-shield.tooltip": "Only counts absorbs that mitigate hits for more than <0>{0}%</0> of your HP.",
  "blood.guide.death-strike.dump-rp": "Dump <0/>",
  "blood.guide.death-strike.good-healing": "Large Heal",
  "blood.guide.death-strike.low-hp": "<0/> at Low HP",
  "className.druid": "Druid",
  "className.hunter": "Hunter",
  "className.paladin": "Paladin",
  "className.priest": "Priest",
  "className.rogue": "Rogue",
  "className.shaman": "Shaman",
  "className.warlock": "Warlock",
  "classic.priest.shadow.suggestions.devouringPlague.uptime": "{0}% Devouring Plague uptime",
  "classic.shaman.TotemTracker.TotemElement": "Totem",
  "classic.shaman.TotemTracker.TotemElementUptime": "Uptime",
  "classic.shaman.checklist.totemuptime.air": "<0/> Air Totem Uptime",
  "classic.shaman.checklist.totemuptime.earth": "<0/> Earth Totem Uptime",
  "classic.shaman.checklist.totemuptime.fire": "<0/> Fire Totem Uptime",
  "classic.shaman.checklist.totemuptime.water": "<0/> Water Totem Uptime",
  "classic.shaman.restoration.chainHeal.averageTargets": "Average Chain Heal targets",
  "classic.shaman.restoration.chainHeal.averageTargets.title": "Below are the casts that only hit the initial target. A large list indicates that target selection is an area for improvement.",
  "classic.shaman.restoration.chainHeal.averageTargets.tooltip": "The average number of targets healed by Chain Heal out of the maximum amount of targets. You cast a total of {0} Chain Heals, which healed an average of {1} out of {2} targets.",
  "classic.shaman.restoration.checklist.aoeSpell": "Target AOE spells effectively",
  "classic.shaman.restoration.checklist.aoeSpell.description": "Chain heal relies on who you target and where they are located to maximize healing potential. You should plan your chain heal ahead of time in preparation for where you expect raid members to be for the spells duration.",
  "classic.shaman.restoration.checklist.aoeSpell.targets": "Average <0/> targets",
  "classic.shaman.restoration.checklist.appliedPrepull": "<0/> applied prepull",
  "classic.shaman.restoration.checklist.buffUptime": "Keep your buffs up",
  "classic.shaman.restoration.checklist.buffUptime.description": "Water Shield and Earth Shield should be applied prior to the fight starting and maintained. Your totems should be kept up as often as possible.",
  "classic.shaman.restoration.checklist.uptime": "<0/> Uptime",
  "classic.shaman.restoration.manaTideTotem.statistic.manaRestored": "Mana restored",
  "classic.shaman.restoration.suggestions.aoeTargets.label": "Try to always cast <0/> on groups of people, so that it heals all {0} potential targets.",
  "common.abilities": "Abilities",
  "common.ability": "Ability",
  "common.about.contributor": "{0, plural, one {Contributor} other {Contributors}}",
  "common.cast": "Cast",
  "common.efficiency": "Efficiency",
  "common.getBossName": "{0} {1}",
  "common.getFightName.fightname": "{bossName} - {fightResult} ({duration})",
  "common.getFightName.kill": "Kill",
  "common.getFightName.wipe": "Wipe {wipes}",
  "common.groundingtotem.cast": "Cast",
  "common.groundingtotem.spellgrounded": "Spell Grounded",
  "common.healingDone": "Healing done",
  "common.health": "Health",
  "common.no": "No",
  "common.player": "Player",
  "common.race": "Race",
  "common.roles.dps.melee": "{num, plural, one {Melee DPS} other {Melee DPS}}",
  "common.roles.dps.ranged": "{num, plural, one {Ranged DPS} other {Ranged DPS}}",
  "common.roles.healer": "{num, plural, one {Healer} other {Healers}}",
  "common.roles.tank": "{num, plural, one {Tank} other {Tanks}}",
  "common.slots.belt": "Belt",
  "common.slots.boots": "Boots",
  "common.slots.bracers": "Bracers",
  "common.slots.chest": "Chest",
  "common.slots.cloak": "Cloak",
  "common.slots.gloves": "Gloves",
  "common.slots.head": "Head",
  "common.slots.legs": "Legs",
  "common.slots.offhand": "OffHand",
  "common.slots.ring": "Ring",
  "common.slots.shoulder": "Shoulder",
  "common.slots.weapon": "Weapon",
  "common.stat.agility": "Agility",
  "common.stat.armor": "Armor",
  "common.stat.avoidance": "Avoidance",
  "common.stat.criticalStrike": "Critical Strike",
  "common.stat.damagePerExecutionTime.long": "Damage per second spent casting the spell",
  "common.stat.damagePerExecutionTime.short": "DPET",
  "common.stat.damagePerMana": "Damage per mana spent",
  "common.stat.damagePerMana.long": "Damage per mana spent casting the spell",
  "common.stat.damagePerMana.short": "DPM",
  "common.stat.haste": "Haste",
  "common.stat.hasteHPCT": "Haste (HPCT)",
  "common.stat.hasteHPM": "Haste (HPM)",
  "common.stat.healingPerExecutionTime": "Healing per second spent casting",
  "common.stat.healingPerExecutionTime.long": "Healing per second spent casting the spell, including GCD wait time.",
  "common.stat.healingPerExecutionTime.short": "HPET",
  "common.stat.healingPerMana": "Healing per mana spent",
  "common.stat.healingPerMana.long": "Healing per mana spent casting the spell",
  "common.stat.healingPerMana.short": "HPM",
  "common.stat.health": "Health",
  "common.stat.intellect": "Intellect",
  "common.stat.leech": "Leech",
  "common.stat.mana": "Mana",
  "common.stat.mastery": "Mastery",
  "common.stat.speed": "Speed",
  "common.stat.stamina": "Stamina",
  "common.stat.strength": "Strength",
  "common.stat.versatility": "Versatility",
  "common.stat.versatilityDR": "Versatility (with DR)",
  "common.suggestions.castsCancelled": "{0}% casts cancelled",
  "common.talents": "Talents",
  "common.target": "Target",
  "common.time": "Time",
  "common.total": "Total",
  "common.yes": "Yes",
  "core.abilities.spellCategories.consumable": "Consumable",
  "core.abilities.spellCategories.cooldowns": "Cooldown",
  "core.abilities.spellCategories.defensive": "Defensive Cooldown",
  "core.abilities.spellCategories.healerDamagingSpell": "Damaging Spell",
  "core.abilities.spellCategories.items": "Item",
  "core.abilities.spellCategories.others": "Spell",
  "core.abilities.spellCategories.rotational": "Rotational Spell",
  "core.abilities.spellCategories.rotationalAoe": "Spell (AOE)",
  "core.abilities.spellCategories.semiDefensive": "Offensive & Defensive Cooldown",
  "core.abilities.spellCategories.utility": "Utility",
  "deathknight.blood.alwaysBeCasting.suggestion.actual": "{0}% downtime",
  "deathknight.blood.alwaysBeCasting.suggestion.suggestion": "While some downtime is inevitable in fights with movement, you should aim to reduce downtime to prevent capping Runes. You can reduce downtime by casting ranged/filler abilities like <0/> or <1/>",
  "deathknight.blood.bloodPlague.statistic": "<0/> {0}% <1>uptime</1>",
  "deathknight.blood.bloodPlague.suggestion.actual": "{0}% Blood Plague uptime",
  "deathknight.blood.bloodPlague.suggestion.suggestion": "Your <0/> uptime can be improved. Keeping <1/> on cooldown should keep it up at all times.",
  "deathknight.blood.blooddrinker.statistic": "{0} / {1} <0>Channels cancelled early</0>",
  "deathknight.blood.blooddrinker.statistic.tooltip": "You lost <0>{0}</0> out of <1>{1}</1> ticks.<2/><3>Damage:</3> {2} / {3}<4/><5>Healing:</5> {4} / {5}<6/>",
  "deathknight.blood.bloodworms.statistic.tooltip": "<0>Damage:</0> {0} / {1}<1/><2>Number of worms summoned:</2> {2}<3/><4>Number of worms popped early:</4> {3}",
  "deathknight.blood.boneShield.statistic": "<0/> {0}% <1>uptime</1>",
  "deathknight.blood.boneShield.statistic.header": "<0>Stacks</0><1>Time (s)</1><2>Time (%)</2>",
  "deathknight.blood.boneShield.suggestion.actual": "{0}% Bone Shield uptime",
  "deathknight.blood.boneShield.suggestion.suggestion": "Your <0/> uptime can be improved. Try to keep it up at all times.",
  "deathknight.blood.bonestorm.suggestion.2p.actual": "{0}% casts spent {SUGGESTED_RUNIC_POWER_SPENT} Runic Power",
  "deathknight.blood.bonestorm.suggestion.2p.recommended": "{0}% is recommended",
  "deathknight.blood.bonestorm.suggestion.2p.suggestion": "Try to cast <0/> only when you have 100 or more Runic Power. The main purpose of <1/> once you have 2-piece is to quickly spend Runic Power on a high Damage Per Execution Time (DPET) ability.",
  "deathknight.blood.bonestorm.suggestion.actual": "{0}% casts hit {SUGGESTED_MIN_TARGETS_FOR_BONESTORM} or more targets",
  "deathknight.blood.bonestorm.suggestion.recommended": "{0}% is recommended",
  "deathknight.blood.bonestorm.suggestion.suggestion": "Try to cast <0/> only if you can reliable hit 2 or more targets to maximize the damage and healing. Casting <1/> with only one target in range is only a minor DPS gain (~10 DPS) at the cost of pooling Runic Power, use <2/> instead.",
  "deathknight.blood.bonestorm.tooltipRow": "<0>Cast #{0} (for {rpCost} RP) hit an average of {avgHits} target{1} for {avgDamage} per hit. ({totalDamage} total)<1/></0>",
  "deathknight.blood.checklist.buffsDebuffs": "Maintain your buffs and debuffs",
  "deathknight.blood.checklist.buffsDebuffs.bloodPlague": "<0/> Uptime",
  "deathknight.blood.checklist.buffsDebuffs.boneShield": "<0/> Uptime",
  "deathknight.blood.checklist.buffsDebuffs.desc": "It is important to maintain these as they contribute a large amount to your DPS and HPS.",
  "deathknight.blood.checklist.buffsDebuffs.markOfBlood": "<0/> Uptime",
  "deathknight.blood.checklist.buffsDebuffs.ossuary": "<0/> Efficiency",
  "deathknight.blood.checklist.defensives": "Use your defensive cooldowns",
  "deathknight.blood.checklist.defensives.desc": "Use these to block damage spikes and keep damage smooth to reduce external healing required.",
  "deathknight.blood.checklist.dontCapResources": "Do not overcap your resources",
  "deathknight.blood.checklist.dontCapResources.deathsCaressEfficiency": "<0/> Efficiency",
  "deathknight.blood.checklist.dontCapResources.desc": "Death Knights are a resource based class, relying on Runes and Runic Power to cast core abilities. Try to spend Runic Power before reaching the maximum amount and always keep atleast 3 Runes on cooldown to avoid wasting resources.",
  "deathknight.blood.checklist.dontCapResources.marrowrendEfficiency": "<0/> Efficiency",
  "deathknight.blood.checklist.dontCapResources.rpEfficiency": "Runic Power Efficiency",
  "deathknight.blood.checklist.dontCapResources.runeEfficiency": "Rune Efficiency",
  "deathknight.blood.checklist.offensiveCd": "Use your offensive cooldowns",
  "deathknight.blood.checklist.offensiveCd.bonestorm": "<0/> Efficiency",
  "deathknight.blood.checklist.offensiveCd.consumption": "Possible <0/> Hits",
  "deathknight.blood.checklist.offensiveCd.desc": "You should aim to use these cooldowns as often as you can to maximize your damage output unless you are saving them for their defensive value.",
  "deathknight.blood.checklist.useShortCd": "Use your short cooldowns",
  "deathknight.blood.checklist.useShortCd.crimsonScourge": "<0/> procs spent",
  "deathknight.blood.checklist.useShortCd.desc": "These should generally always be recharging to maximize efficiency.",
  "deathknight.blood.crimsonScourge.statistic": "{0} % <0>procs wasted</0>",
  "deathknight.blood.crimsonScourge.statistic.tooltip": "{0} out of {1} procs wasted.",
  "deathknight.blood.crimsonScourge.suggestion.actual": "{0}% Crimson Scourge procs wasted",
  "deathknight.blood.crimsonScourge.suggestion.suggestion": "You had unspent <0/> procs. Make sure you always use them.",
  "deathknight.blood.deathsCaress.suggestion.actual": "{0}% bad {1} casts",
  "deathknight.blood.deathsCaress.suggestion.recommended": "0% are recommended",
  "deathknight.blood.deathsCaress.suggestion.suggestion": "Avoid casting <0/> unless you're out of melee range and about to cap your runes while <1/> and <2/> are on cooldown. Dump runes primarily with <3/>.",
  "deathknight.blood.drw.spellLinks.consumption": "and (if in AoE) <0/>",
  "deathknight.blood.drw.spellLinks.default": "<0/>,",
  "deathknight.blood.drw.spellLinks.last": "<0/>",
  "deathknight.blood.drw.suggestion.actual": "{0} out of {1} casts during DRW were good",
  "deathknight.blood.drw.suggestion.goodDrwSpells": "Try and prioritize",
  "deathknight.blood.drw.suggestion.recommended": "{0} recommended",
  "deathknight.blood.drw.suggestion.suggestion": "Avoid casting spells during <0/> that don't benefit from the copies such as <1/> and <2/>. Check the cooldown-tab below for more detailed breakdown.{0}",
  "deathknight.blood.foulBulwark.statistic": "{0}% <0>average buff</0>",
  "deathknight.blood.foulBulwark.statistic.headers": "<0>HP-bonus</0><1>Time (s)</1><2>Time (%)</2>",
  "deathknight.blood.heartbreaker.statistic": "Runic Power generated",
  "deathknight.blood.heartbreaker.statistic.tooltip": "Resulting in about {0} extra Death Strikes.<0/>Your Heart Strike hit on average {1} targets.",
  "deathknight.blood.hemostasis.statistic": "{0} % <0>average DS increase</0>",
  "deathknight.blood.hemostasis.statistic.tooltip": "Resulting in {0} additional damage and {1} additional healing.<0/>You gained {2} and wasted {3} stacks.",
  "deathknight.blood.initialMarrowrend.suggestion": "Use your first <0/> together with <1/> to build up stacks of <2/> faster without wasting as much runes. This will also increase your initial threat-genration as your burst DPS will increase significantly. Don't treat <3/> as a defensive CD unless you really need the parry and increased Runic Power generation defensively.",
  "deathknight.blood.markOfBlood.statistic": "<0/> {0}% <1>Uptime</1>",
  "deathknight.blood.markOfBlood.suggestion.actual": "{0}% Mark Of Blood Uptime",
  "deathknight.blood.markOfBlood.suggestion.suggestion": "Your <0/> uptime can be improved.",
  "deathknight.blood.marrowrendUsage.badCast": "You made this cast with {boneShieldStacks} stacks of Bone Shield while it had {0} seconds left, wasting {wasted} charges.",
  "deathknight.blood.marrowrendUsage.statistic": "{0} / {1} <0>bad casts</0>",
  "deathknight.blood.marrowrendUsage.statistic.tooltip": "{0} casts to refresh Bone Shield, those do not count towards bad casts.<0/>{1} casts with more than {REFRESH_AT_STACKS} stacks of Bone Shield wasting {2} stacks.<1/><2/>Avoid casting Marrowrend unless you have {3} or less stacks or if Bone Shield has less than 6sec of its duration left.",
  "deathknight.blood.marrowrendUsage.suggestion.actual": "{0}% wasted {1} stacks",
  "deathknight.blood.marrowrendUsage.suggestion.recommended": "{0} stacks wasted, {1} stacks generated",
  "deathknight.blood.marrowrendUsage.suggestion.suggestion": "You casted {0} Marrowrends with more than {REFRESH_AT_STACKS} stacks of <0/> that were not about to expire, wasting {1} stacks.<1/>Cast <2/> instead if you are at {2} stacks or above.",
  "deathknight.blood.ossuary.ineffectiveCast": "This Death Strike cast was without Ossuary.",
  "deathknight.blood.ossuary.statistic": "{0} / {1} <0>Death Strikes without Ossuary</0>",
  "deathknight.blood.ossuary.statistic.tooltip": "{0} RP wasted by casting them without Ossuary up.<0/>{1} RP saved by casting them with Ossuary up.<1/>{2}% uptime.",
  "deathknight.blood.ossuary.suggestion.actual": "{0}% Ossuary efficiency",
  "deathknight.blood.ossuary.suggestion.recommended": "{0}% is recommended",
  "deathknight.blood.ossuary.suggestion.suggestion": "Your <0/> usage can be improved. Avoid casting <1/> while not having Ossuary up as you lose Runic Power by doing so.",
  "deathknight.blood.rapidDecomposition.statistic.tooltip": "<0>Blood Plague:</0> {0}<1/><2>{1}:</2> {2}",
  "deathknight.blood.redThirst.statistic": "<0/> {0} sec <1>average reduction</1>",
  "deathknight.blood.redThirst.statistic.tooltip": "{0} sec total effective reduction and {1} sec ({2}%) wasted reduction.",
  "deathknight.blood.relishInBlood.statistic": "{0} <0>RP gained</0>",
  "deathknight.blood.relishInBlood.statistic.tooltip": "<0>RP wasted: </0> {0} ({1} %)<1/><2>Healing: </2> {2} <3/><4>Overhealing: </4> {3} ({4} %) <5/>",
  "deathknight.blood.relishInBlood.suggestion.actual": "You wasted {0}% of RP from {1} by being RP capped.",
  "deathknight.blood.relishInBlood.suggestion.recommended": "{0}% is recommended",
  "deathknight.blood.relishInBlood.suggestion.suggestion": "Avoid being Runic Power capped at all times, you wasted {0} PR by\nbeing RP capped",
  "deathknight.blood.runeforgeSuggestion.apocalypse": "Don't use <0/> as Blood Death Knight, use <1/> instead.",
  "deathknight.blood.runeforgeSuggestion.razorice": "Don't use <0/> as Blood Death Knight, use <1/> instead.",
  "deathknight.blood.runeforgeSuggestion.sanguination": "Don't use <0/> as Blood Death Knight, use <1/> instead.",
  "deathknight.blood.runeforgeSuggestion.spellwarding": "Don't use <0/> as Blood Death Knight, use <1/> instead.",
  "deathknight.blood.runeforgeSuggestion.stoneskinGargoyle": "<0/> is a survivability runeforge at the cost of damage and healing. Use <1/> as there is no need for SSGs EHP increase right now.",
  "deathknight.blood.runeforgeSuggestion.unendingThirst": "Don't use <0/> as Blood Death Knight, use <1/> instead.",
  "deathknight.blood.runicPowerDetails.statistic.label": "Runic Power wasted",
  "deathknight.blood.runicPowerDetails.statistic.tooltip": "{0} out of {1} Runic Power wasted.",
  "deathknight.blood.runicPowerDetails.suggestion.actual": "{0}% wasted",
  "deathknight.blood.runicPowerDetails.suggestion.suggestion": "You wasted {0}% of your Runic Power.",
  "deathknight.blood.tombstone.statistic": "{0} <0>Bad Casts</0>",
  "deathknight.blood.tombstone.statistic.absorbUsed": "<0>Damage Absorbed:</0> {0} <1/><2>Absorb Shield: </2> {1} <3/><4>Healing: </4> {2}",
  "deathknight.blood.tombstone.statistic.headers": "<0>Charges</0><1>RP Wasted</1><2>Absorb Used (%)</2>",
  "deathknight.blood.tombstone.statistic.rpWasted": "<0>RP Generated:</0> {0}",
  "deathknight.blood.tombstone.statistic.tooltip": "Any cast without 5 charges is considered a wasted cast.",
  "deathknight.blood.tombstone.suggestion.actual": "{0}% bad Tombstone casts",
  "deathknight.blood.tombstone.suggestion.suggestion": "You casted {0} <0/> with less than 5 charges causing a reduced absorb shield.",
  "deathknight.blood.voracious.statistic": "<0/> {0}% <1>Uptime</1>",
  "deathknight.blood.willOfTheNecropolis.statistic.tooltip": "<0>Total Damage Absorbed: </0> {0} <1/><2>Activated: </2> {1}<3/><4>Absorbed 5% Max Health or more count: </4> {2}",
  "deathknight.frost.frostScythe.efficiency": "{0}% Frostscythe efficiency",
  "deathknight.frost.suggestions.alwaysBeCasting": "{0}% downtime",
  "deathknight.frost.suggestions.breathOfSindragosa.uptime": "You averaged {0} seconds of uptime per cast",
  "deathknight.frost.suggestions.frostFever.uptime": "{0}% Frost Fever uptime",
  "deathknight.frost.suggestions.killingMachine.wasted": "{0}% of Killing Machine procs were either refreshed and lost or expired without being used",
  "deathknight.frost.suggestions.rime.wastedProcs": "{0}% of Rime procs were either refreshed and lost or expired without being used",
  "deathknight.frost.suggestions.runicPower.wasted": "{0}% wasted",
  "deathknight.shared.runeBreakdown.generatedHeaderTooltip": "Runes generated from passive regeneration and abilities that accelerate it are estimates.",
  "deathknight.shared.runeBreakdown.passive": "Passive Rune regeneration",
  "deathknight.shared.runeDetails.numberOfRunes": "# of Runes",
  "deathknight.shared.runeDetails.title": "Rune usage",
  "deathknight.shared.runeOfHysteria.statistic.gainedSpell": ", resulting in {0} additional {1}",
  "deathknight.shared.runeOfHysteria.statistic.text": "{0} <0>RP gained</0>",
  "deathknight.shared.runeOfHysteria.statistic.tooltip": "You gained {0} RP by using {1}{gainedSpell}.<0/>{2}",
  "deathknight.shared.runeOfHysteria.statistic.tooltip.rpWasted": "You wasted {0} RP (\n{1} %) from Hysteria by being RP capped\n{wastedSpell}.",
  "deathknight.shared.runeOfHysteria.statistic.wastedSpell": ", losing out on {0} {1}",
  "deathknight.shared.runeOfHysteria.suggestion.actual": "You wasted {0}% of RP from {1} by being RP capped",
  "deathknight.shared.runeOfHysteria.suggestion.recommended": "{0}% is recommended",
  "deathknight.shared.runeOfHysteria.suggestion.suggestion": "Avoid being Runic Power capped at all times, while capped you wasted {0} RP from {1}",
  "deathknight.shared.runeOfTheFallenCrusader.statistic": "{0} % <0>average Strength</0>",
  "deathknight.shared.runeOfTheFallenCrusader.statistic.tooltip": "<0>Uptime: </0> {0}% <1/><2>Healing: </2> {1} <3/><4>Overhealing: </4> {2} ({3} %) <5/>",
  "deathknight.shared.runeTracker.statistic.header.runes": "Runes",
  "deathknight.shared.runeTracker.statistic.header.timeAbs": "Time (s)",
  "deathknight.shared.runeTracker.statistic.header.timePct": "Time (%)",
  "deathknight.shared.runeTracker.statistic.tooltip": "Number of runes wasted: {0} <0/>These numbers only include runes wasted from passive regeneration. <1/>The table below shows the time spent at any given number of runes available.",
  "deathknight.shared.runeTracker.statistic.value": "Runes overcapped",
  "deathknight.shared.runeTracker.suggestion.actual": "{0}% runes overcapped",
  "deathknight.shared.runeTracker.suggestion.recommended": "<{0}% is recommended",
  "deathknight.shared.runeTracker.suggestion.suggestion": "You overcapped {0}% of your runes. Try to always have at least 3 runes on cooldown.",
  "deathknight.unholy.suggestions.alwaysBeCasting": "{0}% downtime",
  "deathknight.unholy.suggestions.apocalypse.efficiency": "An average {actual} of Festering Wounds were popped by Apocalypse",
  "deathknight.unholy.suggestions.commanderofthedead.efficiency": "An average {0}% of summons were buffed with Commander of the Dead",
  "deathknight.unholy.suggestions.festeringStrikes.efficiency": "{0}% of Festering Strikes did not risk overcapping Festering Wounds",
  "deathknight.unholy.suggestions.plaguebringer.uptime": "Plaguebringer was up {0}% of the time",
  "deathknight.unholy.suggestions.runicPower.wasted": "{0}% wasted",
  "deathknight.unholy.suggestions.scourgeStrike.efficiency": "{0}% of {1} were used with Wounds on the target",
  "deathknight.unholy.suggestions.suddendoom.wastedProcs": "{0} procs were refreshed or expired without being used",
  "deathknight.unholy.suggestions.summongargoyle.buffing": "Gargoyle was buffed with an average {0} Runic Power",
  "deathknight.unholy.suggestions.vileinfusion.uptime": "Vile Infusion was up {0}% of the time",
  "deathknight.unholy.suggestions.virulentPlague.uptime": "{0}% Virulent Plague uptime",
  "druid.balance.suggestions.castsCancelled": "{0}% casts cancelled",
  "druid.balance.suggestions.filler.efficiency": "{0}% wrong filler spell casts",
  "druid.balance.suggestions.moonfire.uptime": "{0}% Moonfire uptime",
  "druid.balance.suggestions.stellarFlare.uptime": "{0}% Stellar Flare uptime",
  "druid.balance.suggestions.sunfire.uptime": "{0}% Sunfire uptime",
  "druid.feral.suggestions.tigerFuryEnergy.energyWasted": "{0}% of generated energy wasted.",
  "druid.guardian.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "druid.guardian.suggestions.earthwarden.efficiency": "{0}% of potential damage was mitigated by Earthwarden",
  "druid.guardian.suggestions.earthwarden.notOptimal": "{0}% of total damage is melee attacks",
  "druid.guardian.suggestions.frenziedRegeneration.efficiency": "{0}% of casts had a predicted heal of less than {1}% and were cast above {2}% HP",
  "druid.guardian.suggestions.galacticGuardian.unused": "{0}% unused",
  "druid.guardian.suggestions.gore.unused": "{0}% unused",
  "druid.guardian.suggestions.guardianOfElune.unused": "{0}% unused",
  "druid.guardian.suggestions.rage.wasted": "{0}% wasted rage",
  "druid.restoration.suggestions.treeOfLife.efficiency": "{0}% healing",
  "evoker.devastation.suggestions.castsCancelled": "{0}% casts cancelled",
  "evoker.preservation.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "evoker.preservation.suggestions.alwaysBeCasting.nonHealing": "{0}% non healing time",
  "evoker.preservation.suggestions.callOfYsera.percentBuffed": "% of casts buffed",
  "evoker.preservation.suggestions.dreamBreath.avgTargetsHit": "average targets hit",
  "evoker.preservation.suggestions.dreamFlight.targetsHit": "% of group hit with Dream Flight",
  "evoker.preservation.suggestions.echo.wastedBuffs": "wasted Echo buff{0}",
  "evoker.preservation.suggestions.emeraldBlossom.avgTargetsHit": "average targets hit",
  "evoker.preservation.suggestions.emeraldCommunion.numLifebinds": "% of group with Lifebind when casting Emerald Communion",
  "evoker.preservation.suggestions.essenceBurst.wastedStacks": "wasted Essence Burst stacks",
  "evoker.preservation.suggestions.essenceDetails.wasted": "wasted Essence",
  "game.difficulties.hardmode": "Hardmode",
  "game.difficulties.hc": "Heroic",
  "game.difficulties.lfr": "LFR",
  "game.difficulties.mythic": "Mythic",
  "game.difficulties.mythicPlus": "Mythic+",
  "game.difficulties.nhc": "Normal",
  "game.difficulties.unknown": "Unknown difficulty",
  "guide.apl.droppedRule": "You frequently skipped casting <0/>{0}.",
  "guide.apl.overcastFillers": "You frequently cast <0/> when more important spells were available.",
  "guide.augmentation.breathofeons.damage": "This value indicates the amount of damage you did, along with the potential damage you lost to mobs dying early. This value is a guesstimation and therefore not 100% accurate.",
  "guide.gunter.beastmastery.sections.rotation.title": "Rotation",
  "guide.hunter.beastmastery.sections.resources.focus.title": "Focus",
  "guide.hunter.beastmastery.sections.resources.title": "Resource Use",
  "guide.hunter.beastmastery.sections.rotation.barbedshot.data.summary.performance.bad": "Bad Barbed Shots",
  "guide.hunter.beastmastery.sections.rotation.barbedshot.data.summary.performance.good": "Barbed Shot",
  "guide.hunter.beastmastery.sections.rotation.cooldowns.title": "Cooldowns",
  "guide.hunter.beastmastery.sections.rotation.core.graph": "<0>Cooldown Graph</0> - this graph shows when you used your cooldowns and how long you waited to use them again. Grey segments show when the spell was available, yellow segments show when the spell was cooling down. Red segments highlight times when you could have fit a whole extra use of the cooldown.",
  "guide.hunter.beastmastery.sections.rotation.core.title": "Core Rotation",
  "guide.hunter.beastmastery.sections.rotation.frenzy.summary": "This graph shows the number of stacks of <0/> you had. You want to maintain {MAX_FRENZY_STACKS} stacks as much as possible to maximize your damage.",
  "guide.hunter.beastmastery.sections.rotation.frenzy.title": "Frenzy Graph",
  "guide.monk.brewmaster.purifyingbrew.targetAmountPurified": "A reasonable goal is to purify 40-50% of Staggered damage. If you purify at least 45%, this bar will be full.",
  "guide.monk.brewmaster.purifyingbrew.targetChargesUsed": "This value should be judged relative to the Active Tanking Time shown below. If the fraction of charges used is well below the fraction of time spent tanking, that is a serious problem.",
  "guide.rogue.outlaw.sections.coreRotation.title": "Core rotation",
  "guide.rogue.outlaw.sections.resources.comboPoints.buildersBreakdown": "-- WIP section -- Higlight which builders the user is commonly overcapping with.",
  "guide.rogue.outlaw.sections.resources.comboPoints.summary": "Most of your abilities either <0>build</0> or <1>spend</1> <2/>. Never use a builder at 6 or 7 CPs, and always wait until 6 or more cps to use a spender.",
  "guide.rogue.outlaw.sections.resources.comboPoints.title": "Combo Points",
  "guide.rogue.outlaw.sections.resources.energy.summary": "Your primary resource is <0/>. Typically, ability use will be limited by <1/>, not time. Avoid capping <2/> - lost <3/> regeneration is lost DPS. It will occasionally be impossible to avoid capping <4/> - like while handling mechanics or during intermission phases.",
  "guide.rogue.outlaw.sections.resources.energy.title": "Energy",
  "guide.rogue.outlaw.sections.resources.title": "Resource Use",
  "guide.rogue.sections.resources.energy.chart": "The chart below shows your <0/> over the course of the encounter. You wasted <1/> of your <2/>.",
  "guide.unknown-reason": "Other",
  "home.internetExplorer.error": "A wild INTERNET EXPLORER appeared!",
  "hunter.beastmastery.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "hunter.beastmastery.suggestions.alwaysBeCasting.recommended": "<{0}% is recommended",
  "hunter.beastmastery.suggestions.barbedShot.petBuff.recommended": "{0}% is recommended",
  "hunter.beastmastery.suggestions.barbedShot.petBuff.uptime": "Your pet had the buff from Barbed Shot for {0}% of the fight",
  "hunter.beastmastery.suggestions.barbedShot.threeStacks.recommended": "{0}% is recommended",
  "hunter.beastmastery.suggestions.barbedShot.threeStacks.uptime": "Your pet had 3 stacks of the buff from Barbed Shot for {0}% of the fight",
  "hunter.beastmastery.suggestions.beastCleave.efficiency": "{actual} {0} without any Beast Cleave damage",
  "hunter.beastmastery.suggestions.beastCleave.recommended": "{recommended} is recommended",
  "hunter.beastmastery.suggestions.bestialWrath.cooldown.efficiency": "You had {0}% effective cooldown reduction of Bestial Wrath",
  "hunter.beastmastery.suggestions.bestialWrath.cooldown.recommended": ">{0}% is recommended",
  "hunter.beastmastery.suggestions.bestialWrath.focusPool.efficiency": "Average of {0} focus at start of Bestial Wrath",
  "hunter.beastmastery.suggestions.bestialWrath.focusPool.recommended": ">{recommended} focus is recommended",
  "hunter.beastmastery.suggestions.cobraShot.cooldown.recommended": "0 inefficient casts is recommended",
  "hunter.beastmastery.suggestions.cobraShot.cooldown.wasted": "You cast {actual} Cobra Shots when Kill Command wasn't on cooldown",
  "hunter.beastmastery.suggestions.cobraShot.efficiency": "You had {0}% effective cooldown reduction of Kill Command",
  "hunter.beastmastery.suggestions.cobraShot.recommended": ">{0}% is recommended",
  "hunter.beastmastery.suggestions.killerCobra.efficiency": "You cast Cobra Shot while Kill Command wasn't on cooldown, whilst Bestial Wrath was up {actual} times.",
  "hunter.beastmastery.suggestions.killerCobra.recommended": "{recommended} is recommended.",
  "hunter.beastmastery.suggestions.petBasicAttacks.actual": "Your pet didn't cast any Basic Attacks this fight",
  "hunter.beastmastery.suggestions.petBasicAttacks.suggestions": "Your pet should be autocast Basic Attacks",
  "hunter.beastmastery.suggestions.stampede.efficiency": "{actual} inefficient {0}",
  "hunter.beastmastery.suggestions.stampede.recommended": "{recommended} is recommended",
  "hunter.marksmanship.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "hunter.marksmanship.suggestions.alwaysBeCasting.recommended": "<{0}% is recommended",
  "hunter.marksmanship.suggestions.callingTheShots.efficiency": "You had {0}% effective cooldown reduction from Calling the Shots",
  "hunter.marksmanship.suggestions.castsCanceled.efficiency": "{0}% casts cancelled",
  "hunter.marksmanship.suggestions.focusCapTracker.focusLost": "{0}% regenerated focus lost due to being capped.",
  "hunter.marksmanship.suggestions.serpentSting.refreshOutsidePandemic": "You refreshed Serpent Sting {actual} times when it wasn't in the pandemic window",
  "hunter.marksmanship.suggestions.serpentSting.uptime": "You had an uptime of {0}%",
  "hunter.marksmanship.suggestions.steadyFocus.uptime": "{0}% uptime",
  "hunter.shared.suggestions.barrage.efficiency": "{actual} inefficient {0}",
  "hunter.suggestions.serpentsting.uptime": "{0}% Serpent Sting uptime",
  "hunter.survival.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "hunter.survival.suggestions.alwaysBeCasting.recommended": "<{0}% is recommended",
  "hunter.survival.suggestions.birdOfPrey.efficiency": "{0}% of abilities extending CA were used on your pets target",
  "hunter.survival.suggestions.butcheryCarve.averageTargets": "{actual} average targets hit per cast",
  "hunter.survival.suggestions.mongooseBite.focusWindow": "{0} average focus on new window.",
  "hunter.survival.suggestions.wildfireBomb.pandemic.efficiency": "{actual} casts unnecessarily refreshed WFB",
  "hunter.survival.suggestions.wildfireBomb.uptime": "{0}% uptime",
  "hunter.survival.suggetsions.mongooseBite.maxStacksCasts": "{0}% casts on max stacks.",
  "interface.aboutPage.about": "WoWAnalyzer is a tool to help you analyze and improve your World of Warcraft raiding performance through various relevant metrics and gameplay suggestions.<0/><1/>We give detailed insight into various things such as cast behavior, buff uptimes, downtime, cooldown usage, wasted resources and more. We also give insight into useful and interesting statistics such as the (throughput) gain of your talents, trinkets, traits, set bonuses, and other special items and effects.<2/><3/>Using all this data we provide automatic gameplay suggestions that analyzes your actual behavior in a fight and gives pointers to help you improve your performance.<4/><5/>The analysis is custom for each specialization to focus on the things that are important for your spec. It's created by and together with class experts to give you the best possible insights.<6/><7/>Using WoWAnalyzer you will find a wealth of information about the mechanics of your spec, your actual behavior in fights and the optimal playstyle. Analyze your raids after every raid night to continuously improve your performance and become a better player. Whether you're a new player learning a spec for the first time or an experienced player looking for information to help you min-max, WoWAnalyzer is a great tool to have in your arsenal!",
  "interface.aboutPage.addBot": "Add to Discord",
  "interface.aboutPage.howToUse": "Wondering how to use WoWAnalyzer? See the <0><1/> Wowhead guide</0>. If you want to see an example report, click on your spec in the <2>Specializations</2> list.",
  "interface.aboutPage.introducingWOWABot": "Introducing the <0>WoWAnalyzer</0> <1/> bot",
  "interface.aboutPage.introducingWOWABotDetails": "Get users to analyze themselves without lifting a finger (even if they don't read the pins).",
  "interface.aboutPage.moreInfo": "More info",
  "interface.aboutPage.title": "About WoWAnalyzer",
  "interface.armory.alt": "World of Warcraft Armory",
  "interface.armory.text": "Armory",
  "interface.changelogPanel.heading": "Changelog",
  "interface.changelogPanel.option.core": "Core",
  "interface.characterParses.characterParses.errors.characterHidden": "We could find your character but he's very shy",
  "interface.characterParses.characterParses.errors.characterHiddenDetails": "This character is hidden on warcraftlogs and we can't access the parses.<0/><1/>You don't know how to make your character visible again? Check <2>Warcraft Logs </2> and hit the 'Refresh' button above once you're done.",
  "interface.characterParses.characterParses.errors.characterNotFound": "We couldn't find your character on Warcraft Logs",
  "interface.characterParses.characterParses.errors.characterNotFoundDetails": "Please check your input and make sure that you've selected the correct region and realm.<0/>If your input was correct, then make sure that someone in your raid logged the fight for you or check <1>Warcraft Logs guide</1> to get started with logging on your own.<2/><3/>When you know for sure that you have logs on Warcraft Logs and you still get this error, please message us on <4>Discord</4> or create an issue on <5>Github</5>.",
  "interface.characterParses.characterParses.errors.details": "{0} Please message us on <0>Discord</0> or create an issue on <1>Github</1> if this issue persists and we will fix it, eventually.",
  "interface.characterParses.characterParses.errors.noParsesForTier": "We couldn't find any logs",
  "interface.characterParses.characterParses.errors.noParsesForTierDetails": "Please check your filters and make sure that you logged those fights on Warcraft Logs.<0/><1/>Don't know how to log your fights? Check <2>Warcraft Logs guide</2> to get started.",
  "interface.characterParses.characterParses.errors.notResponding": "Request timed out",
  "interface.characterParses.characterParses.errors.notRespondingDetails": "It looks like we couldn't get a response in time from the API, this usually happens when the servers are under heavy load.<0/><1/>You could try and enter your report-code manually <2>here</2>.<3/>That would bypass the load-intensive character lookup and we should be able to analyze your report.<4/>",
  "interface.characterParses.characterParses.errors.unexpected": "Something went wrong",
  "interface.characterParses.characterParses.errors.unknownAPIError": "Something went wrong talking to the server",
  "interface.characterParses.characterParses.errors.wclAPIError": "Something went wrong talking to Warcraft Logs",
  "interface.characterParses.characterParses.fetchingLogs": "Fetching logs...",
  "interface.characterParses.characterParses.home": "Home",
  "interface.characterParses.characterParses.parses": "Parses",
  "interface.characterParses.characterParses.parsesDetails": "This page will only show fights that have been ranked by Warcraft Logs. Wipes are not included and during busy periods there might be a delay before new reports appear. Manually find the report on Warcraft Logs and copy the direct report link to analyze a fight missing from this page.",
  "interface.characterParses.characterParses.refresh": "Refresh",
  "interface.common.errorBoundary.bug": "This is usually caused by a bug in our code. If you're handy with computers please consider sending us a Pull Request with a fix on <0>GitHub</0>. Otherwise please let us know in an issue on <1>GitHub</1> or leave us a message on <2>Discord</2> so we can fix it for you.",
  "interface.common.errorBoundary.error": "An error occurred while trying to render this part of the page.",
  "interface.common.errorBoundary.errorAbove": "The above error occurred in the component:",
  "interface.common.errorBoundary.eventId": "Sentry event ID: {eventId}",
  "interface.common.errorBoundary.technicalInformation": "Technical information to help you fix it. Or us if not you. Technical information to help whoever is inclined to fix the issue.",
  "interface.common.errorBoundary.theError": "The error",
  "interface.guildReports.errors.details": "{0}<0/>Please message us on {DISCORD} or create an issue on {GITHUB} if this issue persists and we will fix it, eventually.",
  "interface.guildReports.errors.guildNotFound": "We couldn't find your guild on Warcraft Logs",
  "interface.guildReports.errors.guildNotFoundDetails": "Please check your input and make sure that you've selected the correct region and realm.<0/>If your input was correct, then make sure that someone in your raid logged the fight for you or check out the {WCL_GUIDE} to get started with logging on your own.<1/><2/>When you know for sure that you have logs on Warcraft Logs and you still get this error, please message us on {DISCORD} or create an issue on {GITHUB}.",
  "interface.guildReports.errors.noReportsForFilter": "We couldn't find any reports",
  "interface.guildReports.errors.noReportsForFilterDetails": "Please check your filters and make sure that you logged those fights on Warcraft Logs.<0/><1/>Don't know how to log your fights? Check out the {WCL_GUIDE} to get started.",
  "interface.guildReports.errors.notResponding": "Request timed out",
  "interface.guildReports.errors.notRespondingDetails": "It looks like we couldn't get a response in time from the API, this usually happens when the servers are under heavy load.<0/><1/>You could try and enter your report-code manually <2>here</2>.<3/>That would bypass the guild lookup and we should be able to analyze your report.<4/>",
  "interface.guildReports.errors.unexpected": "Something went wrong",
  "interface.guildReports.errors.unknownAPIError": "Something went wrong talking to the server",
  "interface.guildReports.errors.wclAPIError": "Something went wrong talking to Warcraft Logs",
  "interface.guildReports.fetchingReports": "Fetching reports...",
  "interface.guildReports.guildReports": "Guild Reports",
  "interface.guildReports.guildReportsDetails": "This page will only show guild reports that are public and listed on Warcraft Logs. If your reports are unlisted, you need to manually find the report on Warcraft Logs and copy the direct report link to analyze a fight missing from this page. If your reports are private, they can't be analyzed.",
  "interface.guildReports.home": "Home",
  "interface.guildReports.refresh": "Refresh",
  "interface.helpWantedPage.helpWanted": "WoWAnalyzer is completely open source and relies on mostly volunteer contributors to implement spec-specific analysis. You don't need to to do anything special to contribute. See the <0>contributing guidelines</0> if you want to give it a try.<1/><2/>If you're unable to help out with improving our analysis, please consider signing up for <3>Premium</3> instead.",
  "interface.helpWantedPage.helpWantedTitle": "Help wanted",
  "interface.helpWantedPage.sharingIsCaring": "Sharing is caring",
  "interface.home.ReportHistory.notViewedAnythingYet": "You haven't viewed anything yet.",
  "interface.home.ReportHistory.viewedXDAgo": "viewed {0}d ago",
  "interface.home.ReportHistory.xDOldReport": "{0}d old report",
  "interface.home.page.about": "About",
  "interface.home.page.helpWanted": "Help wanted",
  "interface.home.page.news": "News",
  "interface.home.page.premium": "Premium",
  "interface.home.page.specs": "Specs",
  "interface.home.reportSelectionHeader.character": "Character",
  "interface.home.reportSelectionHeader.guild": "Guild",
  "interface.home.reportSelectionHeader.improveYourPerformance": "Improve your performance with personal feedback and stats. Just enter the link of a <0>Warcraft Logs</0> report below.",
  "interface.home.reportSelectionHeader.onlyRankedWCLogs": "The character page will only show fights that have been ranked by Warcraft Logs. Wipes are not included and during busy periods there might be a delay before new reports appear. You can still analyze these fights by manually finding the report on Warcraft Logs and using the report link.",
  "interface.home.reportSelectionHeader.recentlyViewed": "Recently viewed",
  "interface.home.reportSelectionHeader.report": "Report",
  "interface.languageSwitcher.clickToSwitch": "Click to switch languages. We've only just started localizing the app, it will take some time until everything is localized.",
  "interface.layout.navigationBar.fightSelection": "Fight selection",
  "interface.layout.navigationBar.playerSelection": "Player selection",
  "interface.layout.navigationBar.premium": "Premium",
  "interface.layout.navigationBar.premiumActive": "Premium active",
  "interface.nameSearch.character": "Character",
  "interface.nameSearch.guild": "Guild",
  "interface.nameSearch.nameNotFound": "{name} not found on {realm}. Double check the game, region, realm, and name.",
  "interface.nameSearch.noAPIResponse": "It looks like we couldn't get a response in time from the API, this usually happens when the servers are under heavy load. Please try and use your report-code or try again later.",
  "interface.nameSearch.noResponse": "It looks like we couldn't get a response in time from the API. Try and paste your report-code manually.",
  "interface.nameSearch.pleaseSelect": "Please select a game, region, realm, and guild.",
  "interface.nameSearch.realm": "Realm",
  "interface.nameSearch.search": "Search",
  "interface.nameSearch.stillWorking": "Still working...",
  "interface.news.follow": "Follow @WoWAnalyzer",
  "interface.news.moreNews": "More news?",
  "interface.news.newStuff": "New stuff",
  "interface.playerBreakdown.healingDone": "Healing done",
  "interface.playerBreakdown.masteryEffectiveness": "Mastery effectiveness",
  "interface.playerBreakdown.masteryEffectivenessTooltip": "This is the amount of healing done by spells affected by mastery. Things like Holy Paladin beacons or Restoration Shaman feeding are NOT included.",
  "interface.playerBreakdown.name": "Name",
  "interface.playerBreakdown.toggle.players": "Players",
  "interface.playerBreakdown.toggle.spells": "Spells",
  "interface.premiumLoginPanel.logged-in.greeting": "Hello {0}.",
  "interface.premiumLoginPanel.logged-in.hasPremium": "Super thank you for your support! We hope you'll enjoy WoWAnalyzer Premium.",
  "interface.premiumLoginPanel.logged-in.logout": "Logout",
  "interface.premiumLoginPanel.logged-in.premiumNotUnlocked": "You haven't unlocked Premium yet. See the panel to the right for more info.",
  "interface.premiumLoginPanel.panel.sign-in": "Premium sign in",
  "interface.premiumLoginPanel.panel.sign-in.description": "Sign in with your Patreon or GitHub account using the buttons below.",
  "interface.premiumPage.githubTooltip": "Only commits that are merged to the main branch are eligible. Your work will have to pass a pull request review before it can be merged.",
  "interface.premiumPage.helpGitHub": "<0>GitHub</0>Improve the analysis of a spec or build a new feature to get 1 month of Premium free<1>*</1>.",
  "interface.premiumPage.helpPatreon": "<0>Patreon</0>Help fund further development by becoming a patron on Patreon.",
  "interface.premiumPage.howToUnlock": "How to unlock WoWAnalyzer Premium:",
  "interface.premiumPage.loginInstructions": "After unlocking Premium, log in using the buttons to the left.",
  "interface.premiumPage.premium": "WoWAnalyzer premium",
  "interface.premiumPage.premium.helpout": "Help out development and unlock <0>WoWAnalyzer Premium</0>!",
  "interface.premiumPage.status": "Hello {0}. Your Premium is currently {1} {2} {3}. {4}",
  "interface.premiumPage.status.active": "Active",
  "interface.premiumPage.status.getPremium": "You can get Premium by becoming a Patron on Patreon or by making a contribution to application on GitHub. Try logging in again if you wish to refresh your status.",
  "interface.premiumPage.status.gitHub": "because of a recent GitHub contribution (active until {0})",
  "interface.premiumPage.status.inactive": "Inactive",
  "interface.premiumPage.status.patreon": "because of your Patreonage",
  "interface.premiumPage.status.userHasPremium": "Awesome!",
  "interface.premiumPage.unlocks": "WoWAnalyzer Premium unlocks the following things:",
  "interface.premiumPage.unlocks.discord": "<0>Discord name color</0><1>We'll help anyone, but sometimes we can't avoid favoritism.</1> Get a distinct Discord name color befitting your contribution. See Patreon for Patron specific name colors. Serious GitHub contributors get the yellow contributor name color.",
  "interface.premiumPage.unlocks.discordChannels": "<0>Access to secret channels on Discord</0><1>You don't know what you're missing out on.</1> Get access to special Discord channels to discuss things privately in the sub-community.",
  "interface.premiumPage.unlocks.new": "<0>New things</0><1>Nothing develops itself.</1> Your contributions will help fund new things and improvements for the site, making it even better. You will also unlock additional features to help with your analysis.",
  "interface.premiumPage.unlocks.noAds": "<0>No ads</0><1>Nobody likes them, but we need them.</1> Any contribution is worth more than the ads, so we'll remove ads from the platform for you so you can consume our content with less distractions and less clutter.",
  "interface.premiumPage.unlocks.updates": "<0>Updates for patches</0><1>Updating for patches is a lot of work.</1> We need to apply all spell changes, add new traits, add support for the new fights, make screenshots, add fight phases, buffs and debuffs, etc. Your contributions make it possible for us to keep specs updated as they're changed in patches.",
  "interface.premiumPage.you": "You",
  "interface.report.advancedLoggingWarning.advancedLoggingWarning": "Advanced Combat Logging not Enabled",
  "interface.report.advancedLoggingWarning.advancedLoggingWarningDetails": "Without Advanced Combat Logging, we are unable to get critical information about players including specs, talents, and gear. Without this information we are unable to provide analysis for this encounter. Please ensure that Advanced Combat Logging is enabled in game (Can be found in the game settings under System/Network).",
  "interface.report.classicLogWarning.classicEncounter": "Classic WoW encounters detected",
  "interface.report.classicLogWarning.classicEncounterDetails": "The current report contains encounters from World of Warcraft: Classic. Currently WoWAnalyzer does not support, and does not have plans to support, Classic WoW logs.",
  "interface.report.fightSelection.documentTitle": "{0} in {1}",
  "interface.report.fightSelection.fightSelection": "Fight selection",
  "interface.report.fightSelection.fightSelectionDetails": "Select the fight you wish to analyze. If a boss or encounter is missing, or the list below is empty, press the Refresh button above to re-pull the log from Warcraft Logs. Additionally, please note that due to the way combat logs work, we are unable to evaluate Target Dummy logs.",
  "interface.report.fightSelection.killsOnly": "Kills only",
  "interface.report.fightSelection.refresh": "Refresh",
  "interface.report.fightSelection.tooltip.backToHome": "Back to home",
  "interface.report.fightSelection.tooltip.home": "Home",
  "interface.report.fightSelection.tooltip.refreshFightsList": "This will refresh the fights list which can be useful if you're live logging.",
  "interface.report.fightSelectionPanelList.information": "You will usually get the most helpful results using raid fights where you're being challenged, such as progress raids.",
  "interface.report.fightSelectionPanelList.kill": "Kill",
  "interface.report.fightSelectionPanelList.wipe": "Wipe {0}",
  "interface.report.handleApiError.analysisError": "An error occurred during analysis",
  "interface.report.handleApiError.analysisErrorDetails": "We fucked up and our code broke like the motherfucker that it is. Please let us know on Discord and we will fix it for you.",
  "interface.report.handleApiError.apiDown": "The API is down.",
  "interface.report.handleApiError.apiDownDetails": "This is usually because we're leveling up with another patch.",
  "interface.report.handleApiError.apiParseFailed": "Failed to parse API response",
  "interface.report.handleApiError.apiParseFailedDetails": "JSON parse error, the API response is probably corrupt. Let us know on Discord and we may be able to fix it for you.",
  "interface.report.handleApiError.back": "Back",
  "interface.report.handleApiError.connectionError": "A connection error occurred.",
  "interface.report.handleApiError.connectionErrorDetails": "Something went wrong talking to our servers, please try again.",
  "interface.report.handleApiError.corruptWCLResponse": "Corrupt Warcraft Logs API response",
  "interface.report.handleApiError.corruptWCLResponseDetails": "Corrupt Warcraft Logs API response received, this report can not be processed.",
  "interface.report.handleApiError.refresh": "Refresh",
  "interface.report.handleApiError.reportNotFound": "Report not found.",
  "interface.report.handleApiError.retry": "Aside from the great news that you'll be the first to experience something new that is probably going to pretty amazing, you'll probably also enjoy knowing that our updates usually only take less than 10 seconds. So just <0>give it another try</0>.",
  "interface.report.handleApiError.wrongOrPrivateReport": "Either you entered a wrong report, or it is private.",
  "interface.report.handleApiError.wrongOrPrivateReportDetails": "Private reports can not be used, if your guild has private reports you will have to <0>upload your own logs</0> or change the existing reports to the <1>unlisted</1> privacy option instead.",
  "interface.report.patchChecker.continueAnyway": "Continue anyway",
  "interface.report.patchChecker.earlierPatch": "This report is for an earlier patch",
  "interface.report.patchChecker.khadgarApproves": "Khadgar approves your bravery",
  "interface.report.patchChecker.previousExpansion": "This report is for a previous expansion",
  "interface.report.patchChecker.viewAnalysisOldExpansion": "Due to the number of class changes since the last expansion (class abilities, talents, etc.), the analysis provided by WoWAnalyzer will most likely be inaccurate.<0/><1/>You can still access the Analysis by clicking 'Continue anyway' below if required.<2/><3/>If you would like to view the analysis on an older version of WoWAnalyzer, <4>click here</4>.<5/><6/>If you would still like to view the analysis using the latest updates, you can click 'Continue anyway' below.",
  "interface.report.patchChecker.viewAnalysisOnOlderVersion": "WoWAnalyzer is constantly being updated to support the latest changes. This can cause some functionality to be modified for the latest talents/traits/trinkets or be removed.<0/><1/>This could mean that some parts of your report will no longer be analysed accurately.<2/><3/>If you would still like to view the analysis using the latest updates, you can click 'Continue anyway' below.",
  "interface.report.render.backToFightSelection": "Back to fight selection",
  "interface.report.render.dataNotAvailable": "Player data does not seem to be available for the selected player in this fight.",
  "interface.report.render.documentTitle": "{0} by {1} in {2}",
  "interface.report.render.hasDuplicatePlayers": "It appears like another \"{playerName}\" is in this log, please select the correct one",
  "interface.report.render.labelFightSelection": "Fight selection",
  "interface.report.render.logCorrupted": "The data received from WCL for this player is corrupt, this player can not be analyzed in this fight.",
  "interface.report.render.notSupported": "This spec is not supported for this expansion.",
  "interface.report.render.playerSelection": "Player selection",
  "interface.report.render.playerSelectionDetails": "Select the player you wish to analyze.",
  "interface.report.renderClassicWarning.classicUnsupported": "Sorry, Classic WoW Logs are not supported",
  "interface.report.renderClassicWarning.classicUnsupportedDetails": "The current report contains encounters from World of Warcraft: Classic. Currently WoWAnalyzer does not support, and does not have plans to support, Classic WoW logs.",
  "interface.report.renderLoading.fetchingPlayerInfo": "Fetching player info...",
  "interface.report.reportDurationWarning.warning": "Report exceeds supported duration",
  "interface.report.reportDurationWarning.warningDetails": "The current report contains data collected over <0>{0} {1}</0>. This could lead to parsing issues with fights later in the report. We recommend that you split your logs before uploading them to warcraftlogs.com.",
  "interface.report.reportDurationWarning.warningDetails.day": "day",
  "interface.report.reportDurationWarning.warningDetails.days": "days",
  "interface.report.reportLoader": "Pulling report info...",
  "interface.report.results.about.aboutSpecnameClassname": "About {0} {1}",
  "interface.report.results.about.isPartial": "The analysis for this spec is incomplete. Important elements may be missing or some features lack sufficient accuracy.",
  "interface.report.results.about.outdated": "The analysis for this spec is outdated. Analysis for spells that were changed after patch {patchCompatibility} may be inaccurate.",
  "interface.report.results.about.unmaintained": "CURRENTLY UNMAINTAINED",
  "interface.report.results.about.updatedForPatch": "Updated for patch",
  "interface.report.results.about.viewEvents": "View all events",
  "interface.report.results.character.killTimes.filterByCovenant": "Filter similiar kill times by your covenant",
  "interface.report.results.checklist.notAvailableYet": "The checklist for this spec is not yet available. We could use your help to add this. See <0>GitHub</0> or join us on <1>Discord</1> if you're interested in contributing this.",
  "interface.report.results.checklist.subTitle": "A quick overview of the important parts to see what you did well and what has room for improvement.",
  "interface.report.results.checklist.title": "Checklist",
  "interface.report.results.encounterStats.eeek": "Something went wrong.",
  "interface.report.results.navigationBar.about": "About",
  "interface.report.results.navigationBar.character": "Character",
  "interface.report.results.navigationBar.deathRecap": "Death Recap",
  "interface.report.results.navigationBar.events": "Events",
  "interface.report.results.navigationBar.overview": "Overview",
  "interface.report.results.navigationBar.statistics": "Statistics",
  "interface.report.results.navigationBar.timeline": "Timeline",
  "interface.report.results.overview.suggestions.average": "Average",
  "interface.report.results.overview.suggestions.explanation": "Based on what you did in this fight, here are some things we think you might be able to improve.",
  "interface.report.results.overview.suggestions.improve": "Some of these suggestions may be nitpicky or fight dependent, but often it's still something you could look to improve. Try to focus on improving one thing at a time - don't try to improve everything at once.",
  "interface.report.results.overview.suggestions.major": "Major <0/>",
  "interface.report.results.overview.suggestions.minor": "Minor <0/>",
  "interface.report.results.overview.suggestions.minorImportance": "Minor importance",
  "interface.report.results.overview.suggestions.noMajorIssues": "There are no major issues in this fight. Good job!",
  "interface.report.results.overview.suggestions.suggestions": "Suggestions",
  "interface.report.results.providedBy": "Provided by",
  "interface.report.results.providedByDetails": "{specTitle} analysis has been provided by {contributorinfo}. They love hearing what you think, so please let them know! <0>More information about this spec's analyzer.</0>",
  "interface.report.results.statistics.adjustStatistics": "Adjust statistics for <0>fight downtime</0> (<1>experimental</1>)",
  "interface.report.results.statistics.covenants": "Covenants",
  "interface.report.results.statistics.fightDowntime": "Fight downtime is any forced downtime caused by fight mechanics or dying. Downtime caused by simply not doing anything is not included.",
  "interface.report.results.statistics.fightDowntimeDetails": "We're still working out the kinks of this feature, some modules might output weird results with this on. When we're finished this will be enabled by default.",
  "interface.report.results.statistics.items": "Items",
  "interface.report.results.statistics.statistics": "Statistics",
  "interface.report.results.statistics.talents": "Talents",
  "interface.report.results.statistics.theorycraft": "Theorycraft",
  "interface.report.results.timeFilter.filter": "Filter",
  "interface.report.results.timeFilter.reset": "Reset Filter",
  "interface.report.results.timeline.buffs.tooltip.gainedAbilityForXSec": "{0}: gained {1} for {2}s",
  "interface.report.results.timeline.casts.neverFinished": "Cast never finished.",
  "interface.report.results.timeline.casts.tooltip.swingCooldown": "{0}: {1}s Swing cooldown ({2} attack speed)",
  "interface.report.results.timeline.casts.tooltip.xSecChannelByAbility": "{0}: {1}s channel by {2}",
  "interface.report.results.timeline.casts.tooltip.xSecGCDByAbility": "{0}: {1}s Global Cooldown by {2}",
  "interface.report.results.timeline.lane.tooltip.castable": "Castable",
  "interface.report.results.timeline.lane.tooltip.chargeRestored": "Charge restored",
  "interface.report.results.timeline.lane.tooltip.eventOrAbilityCooldown": "{0} cooldown: {1}s",
  "interface.report.results.timeline.movement": "{0} - {1}: there was {2} yards movement within this period. The start and stop time of the movement may vary due to incomplete log data.",
  "interface.report.results.tooltip.backToTop": "Scroll back to the top.",
  "interface.report.results.tooltip.newTab.insightsAndTimelines": "Opens in a new tab. View insights and timelines for raid encounters.",
  "interface.report.results.tooltip.newTab.originalReport": "Opens in a new tab. View the original report.",
  "interface.report.results.viewOn": "View on",
  "interface.report.results.warning.build": "These results are analyzed under build different from the standard build. While this will make some modules more accurate, some may also not provide the information you expect them to. <0/> Please report any issues you may find on our GitHub or Discord.",
  "interface.report.results.warning.timeFilter": "These results are filtered to the selected time period. Time filtered results are under development and may not be entirely accurate. <0/> Please report any issues you may find on our GitHub or Discord.",
  "interface.report.supportChecker.continueAnyway": "I want to continue anyway",
  "interface.report.supportChecker.maintainedBy": "{0} {1} is currently being maintained by {maintainers}.",
  "interface.report.supportChecker.outdated": "This spec has not been updated for patch {gameVersion}",
  "interface.report.supportChecker.specNotSupportedDetails": "Sorry, this spec hasn't been updated for the latest patch so we're afraid it might be outdated and potentially mislead. We recommend reading the <0><1/> Wowhead</0> and <2>Icy Veins</2> guides to gain more knowledge about your spec and use this to analyze yourself. You can also try asking for help in a <3>class Discord</3>.<4/><5/>We have no ETA for an update to {specName} {0}. We rely on volunteer contributors to maintain spec analysis, and seeing as {specName} {1} is out of date, it may be that nobody is currently maintaining it. If you are interested or know someone who might be interested helping people help themselves, check out <6>GitHub</6> or <7>Discord</7> for more information.",
  "interface.report.supportChecker.specPartialSupport": "Partial support",
  "interface.report.supportChecker.specPartialSupportDetails": "This spec has received updates for the latest patch but it is still missing important elements needed to provide you with good and reliable feedback.<0/><1/>We recommend reading the <2><3/> Wowhead</2> and <4>Icy Veins</4> guides to gain more knowledge about your spec and use this when analyzing yourself. You can also try asking for help in a <5>class Discord</5>.<6/><7/>We do not know when {0} {1} will have full support. It may take a while to fully support a spec, so please be patient. If you are interested or know someone who might be interested helping people help themselves, check out <8>GitHub</8> or <9>Discord</9> for more information.",
  "interface.report.supportChecker.tooltip.khadgarApproves": "Khadgar approves your bravery",
  "interface.report.supportChecker.unmaintained": "{0} {1} is not currently being maintained by anyone. :(",
  "interface.report.talents.parseFailed": "An error occurred while parsing talents. Talent information for the build this log is from may not be available.",
  "interface.reportSelecter.reportSelecter.button": "Analyze",
  "interface.reportSelecter.reportSelecter.placeholder": "https://www.warcraftlogs.com/reports/<report code>",
  "interface.reportSelecter.reportSelecter.tooltip.supportedLinks": "Supported links:<0/><1><2>https://www.warcraftlogs.com/reports/<report code></2><3>https://www.warcraftlogs.com/character/<region>/<realm>/<name></3><4>https://worldofwarcraft.com/<language-code>/character/<realm>/<name></4><5>https://www.wowchina.com/<language-code>/character/<realm>/<name></5></1>",
  "interface.rootErrorBoundary.bug": "This is usually caused by a bug, please let us know about the issue on GitHub or Discord so we can fix it.",
  "interface.rootErrorBoundary.errorDuringAnalysis": "An error occurred during analysis",
  "interface.rootErrorBoundary.errorDuringAnalysisDetails": "We ran into an error while looking at your gameplay and running our analysis. Please let us know on Discord and we will fix it for you.",
  "interface.rootErrorBoundary.errorOccurred": "An error occurred.",
  "interface.rootErrorBoundary.errorOccurredDetails": "An unexpected error occurred in the app. Please try again.",
  "interface.search.goBackHome": "Go back home",
  "interface.search.invalidSearchParameter": "Invalid search parameter:",
  "interface.search.reportSearch": "Report Search",
  "interface.search.searchingFor": "Searching for",
  "interface.search.supportedTerms": "Supported search terms:<0/><1><2><report code></2><3>https://www.warcraftlogs.com/reports/<report code></3><4>https://www.warcraftlogs.com/character/<region>/<realm>/<name></4><5>https://worldofwarcraft.com/<language-code>/character/<realm>/<name></5></1>",
  "interface.specList.classic": "Classic",
  "interface.specList.retail": "Retail",
  "interface.specList.specs": "Specializations",
  "interface.specList.specs.label": "Click any specialization to view an example report for that spec.",
  "interface.specListItem.maintainer": "Maintained by: {maintainers}",
  "interface.specListItem.notSupported": "Not currently supported",
  "interface.specListItem.partialPatchCompatability": "Partial support for patch {patchCompatibility}",
  "interface.specListItem.patchCompatability": "Accurate for patch {patchCompatibility}",
  "interface.specListItem.unmaintained": "CURRENTLY UNMAINTAINED",
  "interface.statistics.components.gauge.high": "High",
  "interface.statistics.components.gauge.low": "Low",
  "mage.arcane.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "mage.arcane.suggestions.arcaneEcho.badTouchUses": "{0} Bad Touch of the Magi Uses`",
  "mage.arcane.suggestions.arcaneFamiliar.uptime": "{0}% Uptime",
  "mage.arcane.suggestions.arcaneMana.manaLeft": "{0}% (${1} mana left",
  "mage.arcane.suggestions.arcaneMissiles.clearCasting.uptime": "{0}% Uptime",
  "mage.arcane.suggestions.arcaneOrb.badCasts": "{0} Missed Orbs",
  "mage.arcane.suggestions.arcanePower.arcanePowerActiveTime": "{0}% Active Time during Arcane Surge",
  "mage.arcane.suggestions.arcanePower.badCasts": "{0} Bad Cooldown Uses",
  "mage.arcane.suggestions.arcanePowerMana.lowMana": "{0}% Utilization",
  "mage.arcane.suggestions.ruleOfThrees.utilization": "{0}% Utilization",
  "mage.arcane.suggestions.timeAnomaly.utilization": "{0}% Utilization",
  "mage.fire.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "mage.fire.suggestions.alwaysBeCasting.recommended": "<{0}% is recommended",
  "mage.fire.suggestions.charringEmbers.noPhoenixFlames": "{actual} procs without Phoenix Flames",
  "mage.fire.suggestions.charringEmbers.uptimePercent": "{0}% utilization",
  "mage.fire.suggestions.charringEmbers.wastedProcs": "{actual} procs wasted",
  "mage.fire.suggestions.feelTheBurn.maxStackPercent": "{0}% utilization",
  "mage.fire.suggestions.heatingUp.fireBlastUtilization": "{0}% Utilization",
  "mage.fire.suggestions.heatingUp.phoenixFlames.utilization": "{0}% Utilization",
  "mage.fire.suggestions.hostStreak.precasts.utilization": "{0}% Utilization",
  "mage.fire.suggestions.hotStreak.expired": "{0}% expired",
  "mage.fire.suggestions.hotStreak.wastedCrits": "{0} crits wasted",
  "mage.fire.suggestions.improvedScorch.uptimePercent": "{0}% Utilization",
  "mage.fire.suggestions.meteor.combustion.utilization": "{0}% Utilization",
  "mage.fire.suggestions.meteor.efficiency": "{0}% Utilization",
  "mage.fire.suggestions.phoenixFlames.phoenixFlamesCappedCharges": "{0}% of fight capped on charges",
  "mage.fire.suggestions.searingTouch.executeCasts": "{0}% Utilization",
  "mage.fire.suggestions.searingTouch.nonExecuteScorchCasts": "{0}% Utilization",
  "mage.fire.suggestions.shiftingPowerUsage.usagePercent": "{0}% utilization",
  "mage.fire.suggestions.sunKingsBlessing.combustionDuringCombustion": "{0} bad uses",
  "mage.fire.suggestions.sunKingsBlessing.expiredProcs": "{0}% expired procs",
  "mage.fire.suggestions.sunKingsBlessing.hotStreaksWithSKB": "{0}wasted Hot Streaks",
  "mage.frost.alwaysBeCasting.statistic.label": "Active time",
  "mage.frost.alwaysBeCasting.statistic.tooltip": "Downtime is available time not used to cast anything (including not having your GCD rolling). This can be caused by delays between casting spells, latency, cast interrupting or just simply not casting anything (e.g. due to movement/stunned).<0/><1><2>You spent <3>{0}%</3> of your time casting something.</2><4>You spent <5>{1}%</5> of your time casting nothing at all.</4></1>",
  "mage.frost.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "mage.frost.suggestions.combustion.combustionActiveTime": "{0}% Active Time during Combustion",
  "mage.shared.suggestions.arcaneIntellect.uptime": "{0}% Uptime",
  "mage.shared.suggestions.castsCancelled": "{0}% casts cancelled",
  "monk.brewmaster.guide.sck-overcast": "You frequently replaced <0/> with <1>SCK</1>, even when only a single enemy was present.",
  "monk.brewmaster.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "monk.brewmaster.suggestions.blackOxBrew.cdrWasted": "{0}% of Cooldown Reduction wasted",
  "monk.brewmaster.suggestions.blackoutCombo.wasted": "{0}% unused",
  "monk.brewmaster.suggestions.breathOfFire.hitsMitigated": "{0}% of hits mitigated with Breath of Fire",
  "monk.brewmaster.suggestions.purifyingBrew.avgdelay": "{0}s Average Delay",
  "monk.brewmaster.suggestions.rushingJadeWind.uptime": "{0}% uptime",
  "monk.mistweaver.jadeSerpentStatue.uptime": "% uptime",
  "monk.mistweaver.spells.essenceFont.statistic.tooltip": "Mastery:<0><1>{0} additional hits</1><2>{1} additional healing</2><3>Avg number of GoMs hits per triggering event (aka Essence Font Proc Ratio): {2}</3></0>{3}",
  "monk.mistweaver.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "monk.mistweaver.suggestions.alwaysBeCasting.nonHealing": "{0}% non healing time",
  "monk.mistweaver.suggestions.ancientTeachings.uptime": "% uptime",
  "monk.mistweaver.suggestions.chiBurst.targetsHit": "targets hit per Chi Burst cast -",
  "monk.mistweaver.suggestions.chiBurst.targetsHitPartTwo": "% of raid hit",
  "monk.mistweaver.suggestions.envelopingBreath.averageEnvBPerEnv": "Enveloping Breaths per Enveloping Mist during Celestial",
  "monk.mistweaver.suggestions.essenceFont.averageTargetsHit": "average targets hit per cast",
  "monk.mistweaver.suggestions.essenceFont.cancelledCasts": "cancelled casts",
  "monk.mistweaver.suggestions.manaTea.avgManaSaved": "average mana saved per Mana Tea cast",
  "monk.mistweaver.suggestions.manaTea.avgOverHealing": "% average overhealing per Mana Tea cast",
  "monk.mistweaver.suggestions.refreshingJadeWind.avgTargetsHit": "% of targets hit per Refreshing Jade Wind",
  "monk.mistweaver.suggestions.renewingMistDuringManaTea.avgRenewingMists": "average Renewing Mists during Mana Tea",
  "monk.mistweaver.suggestions.soothingMist.channelingWithoutCastingSpells": "% of Soothing Mist casts with max spells casted",
  "monk.mistweaver.suggestions.spinningCraneKick.efficiency": "Spinning Crane Kicks that hit fewer than 3 enemies",
  "monk.mistweaver.suggestions.thunderFocusTea.incorrectCasts": "incorrect casts with Thunder Focus Tea",
  "monk.mistweaver.suggestions.vivaciousVivification.wastedApplications": "wasted applications",
  "monk.mistweaver.suggestions.vivify.renewingMistsPerVivify": "Renewing Mists per Vivify",
  "monk.mistweaver.suggestions.yulonsWhisper.avgTargets": "average targets hit",
  "monk.mistweaver.talentBox.title": "Talent Summary",
  "monk.mistweaver.talentBox.tooltip": "The purpose of this is to show the overall HPS impact of each talent. So not only what the talent itself did, but also feeding and synergy or interactions with other spells or talents. The percentage shown is what you'd lose without the talent, ignoring what you'd gain from the other options.<0/><1/>Note: Due to the synergies that exist between certain talents there is some overlap in the HPS contribution shown. Detailed breakdowns of each talent's impact can be found in the Talents Section.",
  "monk.windwalker.alwaysBeCasting.downtime": "{0}% downtime",
  "monk.windwalker.comboStrikes.masteryBreaksPerMinute": "{0} mastery breaks per minute.",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.averageStacks": "Your average number of <0/> stacks used when you cast <1/> was low",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.averageStacks.actual": "{0} average stacks used",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.averageStacks.recommended": "Try to cast Crackling Jade Lightning while as close to 20 stacks as possible",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.tooltip": "Damage dealt does not account for opportunity cost<0/>Stacks generated <1>{0}</1><2/>Stacks consumed: <3>{1}</3><4/>Stacks wasted by generating at cap: <5>{2}</5><6/>Average stacks spent on each cast: <7>{3}</7>",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.wastedStacks": "You wasted your <0/> stacks by using chi spenders while at 20 stacks",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.wastedStacks.actual": "{0} Wasted stacks per minute",
  "monk.windwalker.modules.items.lastEmperorsCapacitor.wastedStacks.recommended": "{recommended} Wasted stacks per minute is recommended",
  "monk.windwalker.suggestions.blackoutKick.cdrWasted": "{0} seconds of wasted cooldown reduction per minute",
  "monk.windwalker.suggestions.chi.wastedPerMinute": "{0} Chi wasted ({1} per minute)",
  "monk.windwalker.suggestions.comboBreaker.procsUsed": "{0}% used Combo Breaker procs",
  "monk.windwalker.suggestions.fistOfFury.avgTicksPerCast": "{0} average ticks on each Fists of Fury cast",
  "monk.windwalker.suggestions.hitCombo.uptime": "{0} % uptime",
  "monk.windwalker.suggestions.jadeIgnitionWastedStacks": "You wasted your <0/> stacks by using Fists of Fury at full stacks",
  "monk.windwalker.suggestions.touchOfKarma.absorbUsed": "{0}% Touch of Karma absorb used",
  "monk.windwalker.suggestions.xuensBattlegear.cdrWasted": "{0} seconds of wasted cooldown reduction per minute",
  "paladin.holy.modules.abilities.castHolyShockRegularly": "Casting Holy Shock regularly is very important for performing well.",
  "paladin.holy.modules.beacons.beaconHealingBreakdown.beaconHealingCaused": "Beacon healing caused",
  "paladin.holy.modules.beacons.beaconHealingBreakdown.hps": "{0} HPS",
  "paladin.holy.modules.beacons.beaconHealingBreakdown.name": "Name",
  "paladin.holy.modules.beacons.beaconHealingBreakdown.overheal": "Overheal",
  "paladin.holy.modules.beacons.beaconHealingBreakdown.relativeToTotalHealing": "relative to total healing",
  "paladin.holy.modules.beacons.beaconHealingBreakdown.total": "Total: {0}",
  "paladin.holy.modules.beacons.beaconHealingDone.beaconHealingSources": "Beacon healing sources",
  "paladin.holy.modules.beacons.beaconHealingDone.beaconHealingSources.explanation": "Beacon healing is triggered by the <0>raw</0> healing done of your primary spells. This breakdown shows the amount of effective beacon healing replicated by each beacon transfering heal.",
  "paladin.holy.modules.beacons.beaconUptime.beaconUptime": "Beacon Uptime",
  "paladin.holy.modules.beacons.beaconUptime.bofUptime": "BoF Uptime",
  "paladin.holy.modules.beacons.beaconUptime.bolUptime": "BoL Uptime",
  "paladin.holy.modules.beacons.beaconUptime.bovUptime": "BoV Uptime",
  "paladin.holy.modules.beacons.beaconUptime.notCastedPrepull": "Not<0/>casted<1/>prepull",
  "paladin.holy.modules.beacons.directBeaconHealing.actual": "{0}% of all your healing spell casts were on a beacon target",
  "paladin.holy.modules.beacons.directBeaconHealing.directBeaconHealing": "Direct beacon healing",
  "paladin.holy.modules.beacons.directBeaconHealing.hlFol": "HL/FoL",
  "paladin.holy.modules.beacons.directBeaconHealing.otherSpells": "Other spells",
  "paladin.holy.modules.beacons.directBeaconHealing.recommended": "<{0}% is recommended",
  "paladin.holy.modules.beacons.directBeaconHealing.suggestion": "You cast a lot of direct heals on beacon targets. Direct healing beacon targets is inefficient. Try to only cast on beacon targets when they would otherwise die.",
  "paladin.holy.modules.beacons.failedBeaconTransfers.lostBeaconHealing": "Up to {lostBeaconHealing}",
  "paladin.holy.modules.beacons.failedBeaconTransfers.lostBeaconHealingLabel": "Beacon healing lost (line of sight)",
  "paladin.holy.modules.beacons.failedBeaconTransfers.lostBeaconHealingTooltip": "The amount of <0>raw</0> healing that didn't transfer to one or more beacon targets due to an issue such as Line of Sight or phasing.",
  "paladin.holy.modules.beacons.missingBeacons.lostBeaconHealing": "Up to {lostBeaconHealing}",
  "paladin.holy.modules.beacons.missingBeacons.lostBeaconHealingLabel": "Beacon healing lost (missing beacon)",
  "paladin.holy.modules.beacons.missingBeacons.lostBeaconHealingTooltip": "The amount of <0>raw</0> healing that didn't transfer to one or more beacon targets due to a missing beacon. When a beacon drops, re-apply it quickly.",
  "paladin.holy.modules.castBehavior.fillers": "Fillers",
  "paladin.holy.modules.castBehavior.infusionOfLightUsage": "<0/> usage",
  "paladin.holy.modules.castBehavior.wastedProcs": "Wasted procs",
  "paladin.holy.modules.castBehavior.wastedProcsDetails": "The amount of Infusion of Lights you did not use out of the total available. You cast {holyShockCasts} Holy Shocks with a {0}% crit ratio. This gave you {totalIolProcs} Infusion of Light procs, of which you used {totalIolUsages}.",
  "paladin.holy.modules.checklist.avoidBeingInactive": "Try to avoid being inactive for a large portion of the fight",
  "paladin.holy.modules.checklist.avoidBeingInactive.description": "While it's suboptimal to always be casting as a healer you should still try to always be doing something during the entire fight and high downtime is inexcusable. You can reduce your downtime by reducing the delay between casting spells, anticipating movement, moving during the GCD, and <0>when you're not healing try to contribute some damage*</0>.",
  "paladin.holy.modules.checklist.avoidBeingInactive.description.ignoreDamage": "While helping with damage would be optimal, it's much less important as a healer than any of the other suggestions on this checklist. You should ignore this suggestion while you are having difficulties with anything else.",
  "paladin.holy.modules.checklist.avoidFillerSpells": "Avoiding Filler Spells",
  "paladin.holy.modules.checklist.avoidFillerSpells.description": "<0/> and <1/> are inefficient spells to cast compared to the alternatives. Try to only cast them when it will save someone's life or when you have to move and all other instant cast spells are on cooldown.",
  "paladin.holy.modules.checklist.beaconOfFaithTalentAppliedPrepull": "<0/> applied prepull",
  "paladin.holy.modules.checklist.beaconOfFaithTalentUptime": "<0/> Uptime",
  "paladin.holy.modules.checklist.beaconOfLightAppliedPrepull": "<0/> applied prepull",
  "paladin.holy.modules.checklist.beaconOfVirtueTalentUptime": "<0/> Uptime",
  "paladin.holy.modules.checklist.directBeaconHealing": "Direct beacon healing",
  "paladin.holy.modules.checklist.dontTunnelTanks": "Effective Beacon Usage",
  "paladin.holy.modules.checklist.dontTunnelTanks.description": "A common misconception about Holy Paladins is that we should focus tanks when healing. This is actually inefficient. Let your beacons do most of the work, ask your co-healers to keep efficient HoTs on the tanks and only directly heal the tanks when they would otherwise die.",
  "paladin.holy.modules.checklist.downtime": "Downtime",
  "paladin.holy.modules.checklist.masteryEffectiveness": "Mastery effectiveness",
  "paladin.holy.modules.checklist.nonHealingTime": "Non healing time",
  "paladin.holy.modules.checklist.positionWell": "Position yourself well to maximize <0/>",
  "paladin.holy.modules.checklist.positionWell.description": "<0/> has a big impact on the strength of your heals. Try to stay close to the people you are healing to benefit the most from your Mastery.",
  "paladin.holy.modules.checklist.totalFillerPerMinute": "Total filler casts per minute",
  "paladin.holy.modules.checklist.totalFillerPerMinuteWhileHolyShock": "Total filler casts while <0/> was available",
  "paladin.holy.modules.checklist.totalFillerWhileHolyShock": "Total filler <0/>s cast while <1><2/></1> was available",
  "paladin.holy.modules.checklist.useCooldownsEffectively": "Use your cooldowns effectively",
  "paladin.holy.modules.checklist.useCooldownsEffectively.description": "Your cooldowns are an important contributor to your healing throughput. Try to get in as many efficient casts as the fight allows. <0>More info.</0>",
  "paladin.holy.modules.checklist.usePrimarySpells": "Use your primary healing spells as often as possible",
  "paladin.holy.modules.checklist.usePrimarySpells.description": "<0/>is your most efficient healing spell available. Try to cast them as much as possible without overhealing.<1>On Mythic</1> you can often still cast these spells more even if you were overhealing by casting it quicker when it comes off cooldown and improving your target selection. <2>More info.</2>",
  "paladin.holy.modules.checklist.usePrimarySpells.descriptionTooltipElement": "When you're not bringing too many healers.",
  "paladin.holy.modules.checklist.useSupportiveAbilities": "Use your supportive abilities",
  "paladin.holy.modules.checklist.useSupportiveAbilities.description": "While you shouldn't aim to cast defensives and externals on cooldown, be aware of them and try to use them whenever effective. Not using them at all indicates you might not be aware of them enough or not utilizing them optimally.",
  "paladin.holy.modules.fillerFlashOfLight.actualInefficient": "{actual} casts while Holy Shock was available",
  "paladin.holy.modules.fillerFlashOfLight.inefficientCastReason": "Holy Shock was off cooldown when you started casting this unbuffed Flash of Light. You should cast Holy Shock instead.",
  "paladin.holy.modules.fillerFlashOfLight.recommendedInefficient": "No inefficient casts is recommended",
  "paladin.holy.modules.fillerFlashOfLight.suggestion": "You started casting {0} filler <0/>s while <1/> was <2>available</2> (at {1}). <3/> is a much more efficient spell and should be prioritized<4>*</4>.",
  "paladin.holy.modules.fillerFlashOfLight.suggestion.exceptions": "There are very rare exceptions to this. For example it may be worth saving Holy Shock when you know you're going to be moving soon and you may have to heal yourself.",
  "paladin.holy.modules.fillerFlashOfLight.suggestion.tooltip": "It was either already available or going to be available within {HOLY_SHOCK_COOLDOWN_WAIT_TIME}ms.",
  "paladin.holy.modules.fillerLightOfTheMatyrs.actual": "{0} casts per minute - {1} casts total",
  "paladin.holy.modules.fillerLightOfTheMatyrs.holyShockWasAvailable": "Holy Shock was available and should have been cast instead as it is a much more efficient spell.",
  "paladin.holy.modules.fillerLightOfTheMatyrs.inefficientSuggestion": "You cast {0} <0/>s while <1/> was <2>available</2> (at {1}). Try to <3>never</3> cast <4/> when something else is available<5>*</5>.",
  "paladin.holy.modules.fillerLightOfTheMatyrs.inefficientSuggestion.actual": "{0} casts while Holy Shock was available",
  "paladin.holy.modules.fillerLightOfTheMatyrs.inefficientSuggestion.availableWithin": "It was either already available or going to be available within {HOLY_SHOCK_COOLDOWN_WAIT_TIME}ms.",
  "paladin.holy.modules.fillerLightOfTheMatyrs.inefficientSuggestion.exceptions": "There are very rare exceptions to this. For example it may be worth saving Holy Shock when you know you're going to be moving soon and you may have to heal yourself.",
  "paladin.holy.modules.fillerLightOfTheMatyrs.inefficientSuggestion.recommended": "No inefficient casts is recommended",
  "paladin.holy.modules.fillerLightOfTheMatyrs.recommended": "<{recommended} casts per minute is recommended",
  "paladin.holy.modules.fillerLightOfTheMatyrs.suggestion": "You cast many <0/>s. Light of the Martyr is an inefficient spell to cast, try to only cast Light of the Martyr when it will save someone's life or when moving and all other instant cast spells are on cooldown.",
  "paladin.holy.modules.lightOfDawn.avgHitPerCast": "Average targets hit per cast",
  "paladin.holy.modules.masteryEffectiveness.averageDistance": "Average distance",
  "paladin.holy.modules.masteryEffectiveness.masteryEffectiveness": "Mastery effectiveness",
  "paladin.holy.modules.masteryEffectiveness.masteryEffectivenessBreakdown": "Mastery effectiveness breakdown",
  "paladin.holy.modules.masteryEffectiveness.masteryEffectivenessBreakdownDetails": "This shows you your mastery effectiveness on each individual player and the amount of healing done to those players.",
  "paladin.holy.modules.masteryEffectiveness.suggestion": "Your Mastery Effectiveness can be improved. Try to improve your positioning, usually by sticking with melee.",
  "paladin.holy.modules.masteryEffectiveness.suggestion.actual": "{0}% mastery effectiveness",
  "paladin.holy.modules.masteryEffectiveness.suggestion.recommended": ">{0}% is recommended",
  "paladin.holy.modules.overhealing.flashOfLightSuggestion": "Try to avoid overhealing with <0/>. If Flash of Light would overheal it is generally advisable to cast a <1/> instead.",
  "paladin.holy.modules.overhealing.flashOfLightSuggestion.actual": "{0}% overhealing",
  "paladin.holy.modules.overhealing.flashOfLightSuggestion.recommended": "<{0}% is recommended",
  "paladin.holy.modules.overhealing.holyShockSuggestion": "Try to avoid overhealing with <0/>. Save it for when people are missing health.",
  "paladin.holy.modules.overhealing.holyShockSuggestion.actual": "{0}% overhealing",
  "paladin.holy.modules.overhealing.holyShockSuggestion.recommended": "<{0}% is recommended",
  "paladin.holy.modules.overhealing.lightOfDawnSuggestion": "Try to avoid overhealing with <0/>. Save it for when people are missing health.",
  "paladin.holy.modules.overhealing.lightOfDawnSuggestion.actual": "{0}% overhealing",
  "paladin.holy.modules.overhealing.lightOfDawnSuggestion.recommended": "<{0}% is recommended",
  "paladin.holy.modules.talents.crusadersMight.actual": "{0} Holy Shock cast{1} missed.",
  "paladin.holy.modules.talents.crusadersMight.cdr": "Cooldown reduction",
  "paladin.holy.modules.talents.crusadersMight.formatSeconds": "{seconds}s",
  "paladin.holy.modules.talents.crusadersMight.inefficientCast": "Holy Shock was off cooldown when you cast Crusader Strike. You should cast Holy Shock before Crusader Strike for maximum healing or damage.",
  "paladin.holy.modules.talents.crusadersMight.recommended": "Casting Holy Shock on cooldown is recommended.",
  "paladin.holy.modules.talents.crusadersMight.suggestion": "You cast <0/> {0} times when<1/> was off cooldown. <2/> should be used to reduce the cooldown of<3/> and should never be cast when <4/> is avalible. This is a core component of the <5/> <6>build.</6>",
  "paladin.holy.modules.talents.crusadersMight.tooltip": "You cast Crusader Strike <0>{0}</0> time{1} when Holy Shock was off cooldown.<1/>This wasted <2>{2}</2> seconds of Holy Shock cooldown reduction,<3/>preventing you from <4>{3}</4> additional Holy Shock cast{4}.<5/>",
  "paladin.holy.modules.talents.devotionAuraDamageReduction.damageReduction": "Damage reduction",
  "paladin.holy.modules.talents.devotionAuraDamageReduction.drps": "≈{0} DRPS",
  "paladin.holy.modules.talents.devotionAuraDamageReduction.tooltip": "The total estimated damage reduced <0>by the passive</0> was {0} ({1} DRPS). This has high accuracy.<1/>The total estimated damage reduced <2>during Aura Mastery</2> was {2} ({3} DRPS). This has a 99% accuracy.<3/><4/>This value is calculated using the <5>Optional DRs</5> method. This results in the lowest possible damage reduction value being shown. This should be the correct value in most circumstances.<6/><7/>Calculating the exact damage reduced by Devotion Aura is very time and resource consuming. This method uses a very close estimation. The active damage reduced is calculated by taking the total damage taken of the entire raid during <8/> and calculating the damage reduced during this time. The passive damage reduction is calculated by taking the exact damage reduction factor applicable and calculating the damage reduced if that full effect was applied to the Paladin. Even though the passive damage reduction is split among other nearby players, using your personal damage taken should average it out very closely. More extensive tests that go over all damage events have shown that this is usually a close approximation.",
  "paladin.holy.modules.talents.imbuedInfusion.inefficientCast": "Holy Shock was off cooldown when you consumed Infusion of Light. You should cast Holy Shock before Crusader Strike for maximum healing or damage.",
  "paladin.holy.modules.talents.imbuedinfusion.actual": "{0} Holy Shock cast{1} missed.",
  "paladin.holy.modules.talents.imbuedinfusion.formatSeconds": "{seconds}s",
  "paladin.holy.modules.talents.imbuedinfusion.recommended": "Casting Holy Shock on cooldown is recommended.",
  "paladin.holy.modules.talents.imbuedinfusion.suggestion": "You consumed <0/> {0} times when <1/> was off cooldown. <2/> should be used to reduce the cooldown of <3/> and should never be consumed when <4/> is available. This is a core component of the <5/> <6>build.</6>",
  "paladin.holy.modules.talents.imbuedinfusion.tooltip": "You consumed Infusion of Light <0>{0}</0> time{1} when Holy Shock was off cooldown.<1/>This wasted <2>{2}</2> seconds of Holy Shock cooldown reduction,<3/>preventing you from <4>{3}</4> additional Holy Shock cast{4}.<5/>",
  "paladin.holy.timeline.badLotM": "This cast dealt more damage to you than it healed the target. If there is nothing to heal, you should deal damage instead.",
  "paladin.protection.alwaysBeCasting.downtime": "{0}% downtime",
  "paladin.protection.modules.features.noDamageShieldOfTheRighteous.actual": "{0}% of casts hit at least 1 target.",
  "paladin.protection.modules.features.noDamageShieldOfTheRighteous.recommended": ">{0}% is recommended",
  "paladin.protection.modules.features.noDamageShieldOfTheRighteous.suggestion": "SotR is a major source of damage. Make sure that each cast hits at least 1 enemy.",
  "paladin.protection.suggestions.consecration.hitsMitigated": "{0}% of hits were mitigated by Consecration",
  "paladin.protection.suggestions.hammerOfTheRighteous.efficiency": "{0}% of casts while better spells were available",
  "paladin.protection.suggestions.lightOfTheProtector.averageDelay": "{0}s Average Delay",
  "paladin.protection.suggestions.lightOfTheProtector.overhealing": "{0}% Overhealing",
  "paladin.retribution.alwaysBeCasting.downtime": "{0}% downtime",
  "paladin.retribution.suggestions.Crusade.efficiency": "{0} bad first global(s)",
  "paladin.retribution.suggestions.artOfWar.procsUsed": "{0}% proc(s) used.",
  "paladin.retribution.suggestions.judgement.consumed": "{0}% Judgments consumed",
  "paladin.retribution.suggestions.shieldOfVengeance.absorbUsed": "{0}% Shield of Vengeance absorb used",
  "paladin.retribution.suggestions.wakeOfAshes.efficiency": "{actual} casts with no targets hit.",
  "paladin.shared.suggestions.holyPower.wasted": "{0}% Holy Power wasted",
  "priest.discipline.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "priest.discipline.suggestions.purgeTheWicked.uptime": "{0}% uptime",
  "priest.holy.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "priest.holy.suggestions.divineHymn.wastedTicks": "{actual} missed Hymn ticks",
  "priest.holy.suggestions.fortitudeRaidBuff.uptime": "{0}% Power Word: Fortitude uptime",
  "priest.holy.suggestions.spiritOfRedemption.efficiency": "{actual} seconds spent redeeming",
  "priest.shadow.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "priest.shadow.suggestions.castsCancelled": "{0}% casts cancelled",
  "priest.shadow.suggestions.darkEvangilism.uptime": "{0}% Dark Evangilism uptime",
  "priest.shadow.suggestions.deathspeaker.efficiency": "You wasted {0} out of {1} DeathSpeaker procs.",
  "priest.shadow.suggestions.devouringPlague.uptime": "{0}% Devouring Plauge uptime",
  "priest.shadow.suggestions.dispersion.uptime": "{0}% Dispersion uptime",
  "priest.shadow.suggestions.insanity.usage": "You wasted {0} of your Insanity due to overcapping.",
  "priest.shadow.suggestions.insidiousIre.efficiency": "{0}% Insidious Ire efficiency",
  "priest.shadow.suggestions.mindDevourer.efficiency": "You wasted {0} out of {1} of Mind Devourer procs.",
  "priest.shadow.suggestions.mindFlayInsanity.ticksLost": "Lost {0} ticks of Mind Flay: Insanity.",
  "priest.shadow.suggestions.mindSpikeInsanity.castLost": "Lost {0} casts of Mind Spike: Insanity.",
  "priest.shadow.suggestions.shadowWordPain.shadowWeavingUptime": "{0}% Shadow Word: Pain uptime at 5 stacks",
  "priest.shadow.suggestions.shadowWordPain.shadowWordPainOverwrite": "{actual} Shadow Word Pain Overwrites",
  "priest.shadow.suggestions.shadowWordPain.uptime": "{0}% Shadow Word: Pain uptime",
  "priest.shadow.suggestions.shadowyInsight.efficiency": "You wasted {0} out of {1} Shadowy Insight procs.",
  "priest.shadow.suggestions.unfurlingDarkness.efficiency": "You wasted {0} out of {1} Unfurling Darkness procs.",
  "priest.shadow.suggestions.vampiricTouch.uptime": "{0}% Vampiric Touch uptime",
  "priest.shadow.suggestions.voidTorrent.secondsLost": "Lost {0} seconds of Void Torrent.",
  "priest.shared.legendaries.twinsOfTheSunPriestess.efficiency": "You had {0} {castsPlural} of Power Infusion on yourself.",
  "priest.shared.suggestions.DesperatePrayer.efficiency": "You died {0} time(s) with Desperate Prayer available.",
  "qRUjFS": "{0, plural, one {charge} other {charges}}",
  "report.statistics.details": "Details",
  "rogue.outlaw.dispatch.efficiency": "{0}% inefficient casts",
  "rogue.outlaw.suggestions.audacity.efficiency": "{0}% inefficient casts",
  "rogue.outlaw.suggestions.opportunity.efficiency": "{0}% inefficient casts",
  "rogue.outlaw.suggestions.rollTheBones.efficiency": "{0}% ({1} out of {2}) efficient rerolls",
  "rogue.outlaw.suggestions.rollTheBones.uptime": "{0}% Roll the Bones uptime",
  "rogue.shared.suggestions.energy.capped": "{0} regenerated energy lost per minute due to being capped.",
  "rogue.shared.suggestions.finishers.efficiency": "{0}% ({1} out of {2}) inefficient casts",
  "rogue.subtlety.suggestions.castsInStealth.casts": "{actual} {0} casts",
  "rogue.subtlety.suggestions.castsInStealth.efficiency": "{0} casts out of {1} possible.",
  "rogue.subtlety.suggestions.findWeaknessAndVanish.badCasts.actual": "You cast Vanish {0} times with more than {1}s left on Find Weakness on the current target.",
  "rogue.subtlety.suggestions.findWeaknessAndVanish.badCasts.recommended": "Do not cast Vanish with more than {0}s left on Find Weakness on the current target.",
  "rogue.subtlety.suggestions.findWeaknessAndVanish.badCasts.suggestion": "Avoid casting Vanish with more than {0}s left on Find Weakness on the current target.",
  "shaman.elemental.suggestions.castsCancelled": "{0}% casts cancelled",
  "shaman.elemental.suggestions.chainLightning.efficiency": "{0} bad Chain Lightning per minute",
  "shaman.elemental.suggestions.flameShock.efficiency": "{0} Lava Burst casts without Flame Shock DOT",
  "shaman.elemental.suggestions.flameShock.uptime": "{0}% uptime",
  "shaman.elemental.suggestions.primalFireElemental.meteorCastsMissed": "{0} missed Meteor Casts.",
  "shaman.elemental.suggestions.primalFireElemental.unusedSpells": "{0} spell/-s not used by your Fire Elemental ({unusedSpellsString})",
  "shaman.elemental.suggestions.stormElemental.badCasts": "{actual} other casts with Storm Elemental up",
  "shaman.elemental.suggestions.surgeOfPower.stormKeeperEmpowered": "{0}% of Stormkeeper Lightning Bolts empowered with Surge",
  "shaman.restoration.abilities.buffedByTidalWave": "Tidal Waved {0}",
  "shaman.restoration.apt.statistic.label": "Ancestral Protection Totem",
  "shaman.restoration.apt.statistic.label.failure": "No Results",
  "shaman.restoration.apt.statistic.label.success": "{0} events found",
  "shaman.restoration.apt.statistic.tooltip.active": "This includes the APT casts of all Restoration Shamans in the fight.",
  "shaman.restoration.apt.statistic.tooltip.inactive": "Click to analyze APT usage on this fight.",
  "shaman.restoration.apt.status.res": "Resurrected",
  "shaman.restoration.apt.status.revivable": "Able to revive",
  "shaman.restoration.apt.status.totemPlaced": "Totem placed",
  "shaman.restoration.av.statistic.disabled": "Module disabled",
  "shaman.restoration.av.statistic.disabled.reason": "There were multiple Restoration Shamans with Ancestral Vigor or Downpour in your raid group, this causes major issues with buff tracking. As the results from this module would be very inaccurate, it was disabled.",
  "shaman.restoration.av.statistic.label": "Lives saved",
  "shaman.restoration.av.statistic.tooltip.active": "The amount of players that would have died without your max health increase buffs.",
  "shaman.restoration.av.statistic.tooltip.inactive": "Click to analyze how many lives were saved by your max health increase buffs.",
  "shaman.restoration.castBehaviour.statistic.fillers": "Fillers",
  "shaman.restoration.castBehaviour.statistic.tidalWaves": "<0/> usage",
  "shaman.restoration.castBehaviour.unusedTW": "Unused Tidal Waves",
  "shaman.restoration.castBehaviour.unusedTW.tooltip": "The amount of Tidal Waves you did not use out of the total available. You cast {riptideCasts} Riptides which gave you {totalTwGenerated} Tidal Waves charges, of which you used ${totalTwUsed}.",
  "shaman.restoration.chainHeal.averageTargets": "Average Chain Heal targets",
  "shaman.restoration.chainHeal.averageTargets.title": "Below are the casts that only hit the initial target. A large list indicates that target selection is an area for improvement.",
  "shaman.restoration.chainHeal.averageTargets.tooltip": "The average number of targets healed by Chain Heal out of the maximum amount of targets. You cast a total of {0} Chain Heals, which healed an average of {1} out of {2} targets. Keep in mind, that Unleash Life can increase the maximum number of targets by 1.",
  "shaman.restoration.checklist.aoeSpell": "Target AOE spells effectively",
  "shaman.restoration.checklist.aoeSpell.description": "As a resto shaman our core AOE spells rely on not just who we target but where they are on the ground to maximize healing potential. You should plan you AOE spells ahead of time in preparation for where you expect raid members to be for the spells duration.",
  "shaman.restoration.checklist.aoeSpell.efficiency": "Average <0/> efficiency",
  "shaman.restoration.checklist.aoeSpell.targets": "Average <0/> targets",
  "shaman.restoration.checklist.appliedPrepull": "<0/> applied prepull",
  "shaman.restoration.checklist.buffUptime": "Keep your buffs up",
  "shaman.restoration.checklist.buffUptime.description": "Water Shield and Earth Shield should be applied prior to the fight starting and maintained.<0/>It is currently not possible to detect if you applied Water Shield before the pull or how good its uptime was, so just keep that in mind.",
  "shaman.restoration.checklist.cooldownUsage": "Use cooldowns effectively",
  "shaman.restoration.checklist.cooldownUsage.description": "Your cooldowns are an important contributor to your healing throughput. Try to get in as many efficient casts as the fight allows.<0>More info.</0>",
  "shaman.restoration.checklist.efficientSpells": "Use core efficient spells as often as possible",
  "shaman.restoration.checklist.efficientSpells.description": "Spells such as <0/>, <1/> and <2/> are your most efficient spells available. Try to cast them as much as possible without overhealing. <3>On Mythic*</3> you can often still cast these spells more even if you were overhealing by casting it quicker when it comes off cooldown and improving your target selection.<4>More info.</4>",
  "shaman.restoration.checklist.efficientSpells.description.tooltip": "When you're not bringing too many healers.",
  "shaman.restoration.checklist.inactivity": "Try to avoid being inactive for a large portion of the fight",
  "shaman.restoration.checklist.inactivity.description": "While it's suboptimal to always be casting as a healer you should still try to always be doing something during the entire fight and high downtime is inexcusable. You can reduce your downtime by reducing the delay between casting spells, anticipating movement, moving during the GCD, and <0>when you're not healing try to contribute some damage*</0>.",
  "shaman.restoration.checklist.inactivity.description.tooltip": "While helping with damage would be optimal, it's much less important as a healer than any of the other suggestions on this checklist. You should ignore this suggestion while you are having difficulties with anything else.",
  "shaman.restoration.checklist.inactivity.downtime": "Downtime",
  "shaman.restoration.checklist.inactivity.nonHealTime": "Non healing time",
  "shaman.restoration.checklist.manaUsage": "Use all of your <0/> effectively",
  "shaman.restoration.checklist.manaUsage.description": "If you have a large amount of mana left at the end of the fight that's mana you could have turned into healing. Try to use all your mana during a fight. A good rule of thumb is to try to match your mana level with the boss's health.",
  "shaman.restoration.checklist.manaUsage.manaLeft": "Mana left",
  "shaman.restoration.checklist.uptime": "<0/> Uptime",
  "shaman.restoration.config.description": "Welcome to the Resto Shaman analyzer! We hope you find these suggestions and statistics useful.<0/><1/>If you want to learn more about Resto Shaman, join the Resto Shaman community at the <2>Ancestral Guidance</2> discord server and make sure to visit the guides on <3>Wowhead</3> and <4>Icy Veins</4>.<5/><6/><7>If there is something missing, incorrect, or inaccurate, please report it on <8>GitHub</8> or contact us on <9>Discord</9>.</7>",
  "shaman.restoration.downpour.statistic.label": "Average Downpour cooldown",
  "shaman.restoration.downpour.statistic.label.tooltip": "You cast a total of {downpourCasts} Downpours, which on average hit {0} out of 5 targets. Keep in mind, that Unleash Life can increase the maximum number of targets by 2.",
  "shaman.restoration.downpour.statistic.value": "{0} seconds",
  "shaman.restoration.ewt.statistic.label": "Earthen Wall Totem efficiency",
  "shaman.restoration.ewt.statistic.tooltip": "The percentage of the potential absorb of Earthen Wall Totem that was actually used. You cast a total of {casts} Earthen Wall Totems with a combined health of {0}, which absorbed a total of {1} damage.<0/><1/>This can be higher than 100% because it sometimes absorbs a few more damage hits before the totem realizes it is supposed to be dead already.<2/><3/><4>Pet healing is filtered out.</4>",
  "shaman.restoration.ewt.statisticlist.tooltip": "Pet healing is filtered out",
  "shaman.restoration.ewt.suggestion.label": "Try to cast <0/> at times - and positions where there will be as many people taking damage possible inside of it to maximize the amount it absorbs.",
  "shaman.restoration.flashFlood.statistic.description": "{0} seconds",
  "shaman.restoration.flashFlood.statistic.description.tooltip": "Cast time saved by Flash Flood. <0/>{0} seconds 'saved' on reductions below GCD.",
  "shaman.restoration.flashFlood.statistic.label": "<0/> usage",
  "shaman.restoration.flashFlood.statistic.title": "Total Cast Time Saved",
  "shaman.restoration.healingEfficiencyDetails": "<0/> mana gained is removed from the spell, meaning the mana spent of that spell will be lower.<1/>Healing that is caused by the <2/> buff, is added to <3/> instead of the spell that was buffed.<4/><5/> is given the healing from its healing buff and is removed from the spells that were buffed.",
  "shaman.restoration.healingEfficiencyDetails2": "<0/> is given the healing from its created <1/> & <2/> and is removed from those spells.",
  "shaman.restoration.healingRain.averageTargets.label": "Average Healing Rain Targets",
  "shaman.restoration.healingRain.averageTargets.label.tooltip": "The average number of targets healed by Healing Rain out of the maximum amount of 5 targets.",
  "shaman.restoration.healingWave.inefficientCast.reason": "Riptide was off cooldown when you started casting this unbuffed Healing Wave. Casting Riptide into Healing Wave to generate and use a Tidal Wave stack, or using a Flash Flood buff (if talented) is a lot more efficient compared to casting a full-length Healing Wave.",
  "shaman.restoration.highTide.statistic.tooltip": "{0} High Tide buff stacks used out of {1}.",
  "shaman.restoration.masteryEffectiveness.statistic.label": "Mastery benefit",
  "shaman.restoration.masteryEffectiveness.statistic.panel": "Mastery effectiveness breakdown",
  "shaman.restoration.masteryEffectiveness.statistic.tooltip": "The percent of your mastery that you benefited from on average (so always between 0% and 100%). Since you have {0}% mastery, this means that on average your heals were increased by {1}% by your mastery.",
  "shaman.restoration.resurgence.statistic.tableHeader.amount": "Amount",
  "shaman.restoration.resurgence.statistic.tableHeader.crits": "Crits",
  "shaman.restoration.resurgence.statistic.tableHeader.mana": "% of mana",
  "shaman.restoration.resurgence.statistic.tableHeader.spell": "Spell",
  "shaman.restoration.slt.statistic.label": "Damage reduction",
  "shaman.restoration.slt.statistic.tooltip": "The total estimated damage reduced during Spirit Link was {0} ({1} DRPS). This has a 99% accuracy.<0/><1/>This value is calculated using the <2>Optional DRs</2> method. This results in the lowest possible damage reduction value being shown. This should be the correct value in most circumstances. Health redistribution is not part of this calculated value.",
  "shaman.restoration.slt.statistic.value": "≈{0} DRPS",
  "shaman.restoration.spell.chainHeal": "Chain Heal",
  "shaman.restoration.spell.downpour": "Downpour",
  "shaman.restoration.spell.healingRain": "Healing Rain",
  "shaman.restoration.spell.healingSurge": "Healing Surge",
  "shaman.restoration.spell.healingWave": "Healing Wave",
  "shaman.restoration.spell.healing_rain": "Healing Rain",
  "shaman.restoration.spell.riptide": "Riptide",
  "shaman.restoration.spell.wellspring": "Wellspring",
  "shaman.restoration.suggestions.aoeTargets.averageTargets": "average targets healed",
  "shaman.restoration.suggestions.aoeTargets.label": "Try to always cast <0/> on groups of people, so that it heals all {0} potential targets.",
  "shaman.restoration.suggestions.healingRain.averageTargets": "{0} average targets healed",
  "shaman.restoration.suggestions.healingSurge.unbuffed": "{0}% of unbuffed Healing Surges",
  "shaman.restoration.suggestions.healingWave.unbuffed": "{0}% of unbuffed Healing Waves",
  "shaman.restoration.suggestions.tidalWaves.actual": "{0}% unused Tidal waves",
  "shaman.restoration.suggestions.tidalWaves.label": "<0/> buffed <1/> can make for some very efficient healing, consider casting more of them if you are running into mana issues ({0}% unused Tidal Waves).",
  "shaman.restoration.suggestions.tidalWaves.recommended": "Less than {0}% unused is recommended",
  "shaman.restoration.suggestions.wellSpring.label": "You're not making full use of the potential of <0/>. Try to aim it towards stacks of injured players with 6 people or more.",
  "shaman.restoration.talentBox.title": "Healing Contribution",
  "shaman.restoration.talentBox.tooltip": "The purpose of this is to show the overall HPS impact of each talent. So not only what the talent itself did, but also feeding and synergy or interactions with other spells or talents. The percentage shown is what you'd lose without the talent, ignoring what you'd gain from the other options.<0/><1/><2>Not Supported:</2><3/>Echo of the Elements",
  "shaman.restoration.unleashLife.statistic.tooltip": "{0}% from Unleash Life and {1}% from the healing buff.",
  "shaman.restoration.wellspring.inefficientCast.reason": "This Wellspring cast hit less than 6 targets.",
  "shaman.restoration.wellspring.statistic.label": "Wellspring target efficiency",
  "shaman.restoration.wellspring.statistic.tooltip": "The average number of targets healed by Wellspring out of the minimum amount of 6 targets to archive the maximum potential healing.",
  "shaman.shared.damageReduced.label": "Estimated damage reduced",
  "shaman.shared.damageReduced.tooltip": "The total estimated damage reduced was {0}.<0/><1/>This is the lowest possible value. This value is pretty accurate for this log if you are looking at the actual gain over not having <2/> bonus at all, but the gain may end up higher when taking interactions with other damage reductions into account.",
  "shaman.shared.suggestions.maelstrom.overcapped": "{0}% overcapped Maelstrom",
  "shared.alwaysBeCasting.statistic.footer.activetime.tooltip": "You spent <0>{0}%</0> of your time casting something.",
  "shared.alwaysBeCasting.statistic.footer.downtime.tooltip": "You spent <0>{0}%</0> of your time casting nothing at all.",
  "shared.alwaysBeCasting.statistic.label": "Downtime",
  "shared.alwaysBeCasting.statistic.tooltip": "Downtime is available time not used to cast anything (including not having your GCD rolling). This can be caused by delays between casting spells, latency, cast interrupting or just simply not casting anything (e.g. due to movement/stunned).<0/><1><2>You spent <3>{0}%</3> of your time casting something.</2><4>You spent <5>{1}%</5> of your time casting nothing at all.</4></1>",
  "shared.alwaysBeCastingHealing.statistic": "Active time",
  "shared.alwaysBeCastingHealing.statistic.tooltip": "This is the precise amount of time you were actively casting something or waiting for a Global Cooldown. The remaining time was downtime; you cast nothing and wasn't waiting for a global cooldown (i.e. \"AFK time\").<0/><1/>You were active for <2>{0}%</2> of the fight. You spent <3>{1}%</3> of your time casting supportive spells, <4>{2}%</4> of the time casting offensive spells and <5>{3}%</5> of the time doing nothing.<6/><7/>See the timeline for details.",
  "shared.castEfficiency.canBeImproved": "Can be improved.",
  "shared.castEfficiency.casts": "Casts",
  "shared.castEfficiency.casts.tooltip": "Maximum possible casts are based on the ability's cooldown and the fight duration. For abilities that can have their cooldowns dynamically reduced or reset, it's based on the average actual time it took the ability to cooldown over the course of this encounter.",
  "shared.castEfficiency.cpm": "CPM",
  "shared.castEfficiency.cpm.tooltip": "Casts Per Minute",
  "shared.castEfficiency.timeOnCooldown": "Time on Cooldown",
  "shared.castEfficiency.timeOnCooldown.tooltip": "The percentage of time the spell was kept on cooldown. For spells without charges this also includes when the spell was unavailable due to cast time or time spent waiting for a GCD when the spell was reset due to a proc. Spells with multiple charges count as on cooldown as long as you have fewer than maximum charges. For spells with long cooldowns, it's possible to have well below 100% on cooldown and still achieve maximum casts.",
  "shared.characterPanel.stats.pull": "Stats on pull",
  "shared.characterPanel.stats.pull.tooltip": "These stats include any <0>rating</0> buffs, such as flasks, potions and other buffs. Percentage buffs such as Bloodlust are <1>not</1> included.",
  "shared.checklist.missingChecklist": "The checklist is not yet available for this spec. See <0>GitHub</0> or join us on <1>Discord</1> if you're interested in contributing this.",
  "shared.cooldownThroughputTracker.cooldown.absorbApplied": "absorb applied",
  "shared.cooldownThroughputTracker.cooldown.absorbApplied.tooltip": "The total amount of absorb shields applied during the buff.",
  "shared.cooldownThroughputTracker.cooldown.absorbed": "damage absorbed",
  "shared.cooldownThroughputTracker.cooldown.absorbed.tooltip": "This includes all damage absorbed that occurred while the buff was up, even if it was not triggered by spells cast inside the buff duration.",
  "shared.cooldownThroughputTracker.cooldown.damageDone": "damage ({0} DPS)",
  "shared.cooldownThroughputTracker.cooldown.damageDone.tooltip": "This number represents the total amount of damage done during the duration of this cooldown, any damage done by DOTs after the effect of this cooldown has exprired will not be included in this statistic.",
  "shared.cooldownThroughputTracker.cooldown.events": "Filter events",
  "shared.cooldownThroughputTracker.cooldown.events.tooltip": "Filter events to the cooldown window.",
  "shared.cooldownThroughputTracker.cooldown.expand": "More",
  "shared.cooldownThroughputTracker.cooldown.expand.again": "Even more",
  "shared.cooldownThroughputTracker.cooldown.healing": "healing ({0} HPS)",
  "shared.cooldownThroughputTracker.cooldown.healing.tooltip": "This includes all healing that occurred while the buff was up, even if it was not triggered by spells cast inside the buff duration. Any delayed healing such as HOTs, Absorbs and Atonements will stop contributing to the healing done when the cooldown buff expires, so this value is lower for any specs with such abilities.",
  "shared.cooldownThroughputTracker.cooldown.manaUsed": "<0>{0}</0>mana used",
  "shared.cooldownThroughputTracker.cooldown.overhealing": "overhealing",
  "shared.cooldownThroughputTracker.cooldown.overhealing.tooltip": "This includes all healing that occurred while the buff was up, even if it was not triggered by spells cast inside the buff duration. Any delayed healing such as HOTs, Absorbs and Atonements will stop contributing to the healing done when the cooldown buff expires, so this value is lower for any specs with such abilities.",
  "shared.cooldownThroughputTracker.cooldown.shrink": "Show less",
  "shared.cooldownThroughputTracker.cooldown.simple": "Show simple",
  "shared.cooldownThroughputTracker.tab": "Cooldowns",
  "shared.cooldownThroughputTracker.tab.explanation": "This shows the effectiveness of your throughput cooldowns and your cast behavior during them. Click on <0>More</0> to see details such as the delay between casting spells and the healing or damage done with them. Take a look at the timeline for a different kind of view of your casts during buffs.",
  "shared.cooldownThroughputTracker.tab.title": "Throughput cooldowns",
  "shared.dispelTracker.label": "Dispels",
  "shared.distanceMoved.statistic.label": "Distance moved",
  "shared.distanceMoved.statistic.tooltip": "Consider this when analyzing the fight, as some fights require more movement than others. Unnecessary movement can result in a DPS/HPS loss.<0/><1/>In ≈{0} seconds of movement you moved ≈{1} yards (≈{2} yards per minute). This statistic may not be entirely accurate for fights with lots of problems.",
  "shared.enchantChecker.guide.noEnchant.label": "Your {slotName} is missing an enchant. Apply a strong enchant to increase your throughput.",
  "shared.enchantChecker.guide.noEnchant.labelWithRecommendation": "Your {slotName} is missing an enchant. Apply a strong enchant to increase your throughput. Recommended: {recommendedEnchantList}",
  "shared.enchantChecker.guide.strongEnchant.label": "Your {slotName} has a strong enchant{currentEnchantContent}. Good work!",
  "shared.enchantChecker.guide.strongEnchant.labelWithRecommendation": "Your {slotName} has a strong enchant{currentEnchantContent} but these are recommended: {recommendedEnchantList}",
  "shared.enchantChecker.guide.weakEnchant.label": "Your {slotName} has a cheap enchant{currentEnchantContent}. Apply a stronger enchant to increase your throughput.",
  "shared.enchantChecker.guide.weakEnchant.labelWithRecommendation": "Your {slotName} has a cheap enchant{currentEnchantContent}. Apply a stronger enchant to increase your throughput. Recommended: {recommendedEnchantList}",
  "shared.enchantChecker.suggestions.noEnchant.label": "Your <0>{slotName}</0> is missing an enchant. Apply a strong enchant to increase your throughput.",
  "shared.enchantChecker.suggestions.weakEnchant.label": "Your <0>{slotName}</0> has a cheap enchant. Apply a stronger enchant to increase your throughput.",
  "shared.healerStatValues.statistic.qeLink": "<0/> Open Questionably Epic Live",
  "shared.healerStatValues.statistic.stats.tooltip": "{gainPerSecond} HPS per 1 rating / {rating} rating per 1% throughput",
  "shared.healerStatValues.statistic.title": "Stat Values",
  "shared.healerStatValues.statistic.title.tooltip": "These stat values are calculated using the actual circumstances of this encounter. These values reveal the value of the last 1 rating of each stat, they may not necessarily be the best way to gear. The stat values are likely to differ based on fight, raid size, items used, talents chosen, etc.<0/><1/>DPS gains are not included in any of the stat values.",
  "shared.healerStatValues.statistic.title.value": "Value",
  "shared.healerStatValues.statistic.title.value.tooltip": "Normalized so Intellect is always 1.00.",
  "shared.healerStatValues.stats.hpct": "HPCT stands for \"Healing per Cast Time\". This is the value that Haste would be worth if you would cast everything you are already casting (and that scales with Haste) faster. Mana is not accounted for in any way and you should consider the Haste stat weight 0 if you run out of mana while doing everything else right.",
  "shared.healerStatValues.stats.hpm": "HPM stands for \"Healing per Mana\". In valuing Haste, it considers only the faster HoT ticking and not the reduced cast times. Effectively it models haste's bonus to mana efficiency. This is typically the better calculation to use for raid encounters where mana is an issue.",
  "shared.healerStatValues.stats.versDR": "Weight includes both healing boost and damage reduction, counting the damage reduced as additional throughput.",
  "shared.healingEfficiency.tableHeader.casts": "Casts",
  "shared.healingEfficiency.tableHeader.casts.tooltip": "Total Casts (Number of targets hit)",
  "shared.healingEfficiency.tableHeader.damageDone": "Damage Done",
  "shared.healingEfficiency.tableHeader.healingDone": "Healing Done",
  "shared.healingEfficiency.tableHeader.manaSpent": "Mana Spent",
  "shared.healingEfficiency.tableHeader.overhealingDone": "Overhealing",
  "shared.healingEfficiency.tableHeader.timeSpent": "Time Spent",
  "shared.healingEfficiency.title": "Mana Efficiency",
  "shared.healingEfficiency.toggle.cooldowns": "Show Cooldowns",
  "shared.healingEfficiency.toggle.damage": "Show Damage",
  "shared.healingEfficiency.toggle.detailed": "Detailed View",
  "shared.healingEfficiency.toggle.healing": "Show Healing",
  "shared.lowHealthHealing.slider.maxHealth": "Max health of target:",
  "shared.lowHealthHealing.slider.minEffective": "Min effective healing (percentage of target's health):",
  "shared.lowHealthHealing.tab.explanation": "This shows all instances of healing people below a certain health threshold.",
  "shared.lowHealthHealing.tab.title": "Triage healing",
  "shared.lowHealthHealing.table.event": "{0}% health",
  "shared.lowHealthHealing.table.event.tooltip": "This number may be negative when the player had an absorb larger than his health pool.",
  "shared.lowHealthHealing.table.total": "Total healing done on targets below {0}% health: {1} (spread over {count} seperate heals).<0/>Total healing done on targets below {2}% health for more than {3}% of target's max health: {4} (spread over {bigHealCount} seperate heals).",
  "shared.manaLevelChart.statistic.explanation": "Mana (blue) along with boss HP and deaths. As a rule of thumb aim to burn mana about as quickly as the boss is losing health. Some fights require specific mana management though.",
  "shared.manaLevelChart.statistic.title": "Mana pool",
  "shared.manaUsageChart.statistic.explanation": "This shows you your mana usage in correlation with your throughput. Big spikes in mana usage without increases in throughput may indicate poor mana usage. The scale for both mana lines is 0-100% where 100% is aligned with the max HPS throughput.",
  "shared.manaUsageChart.statistic.title": "Mana usage",
  "shared.manaValues.suggestions.label": "You had mana left at the end of the fight. A good rule of thumb is having the same mana percentage as the bosses health percentage. Mana is indirectly tied with healing throughput and should be optimized.",
  "shared.modules.castEfficiency.actual": "{0} out of {1} possible casts. You kept it on cooldown {2}% of the time.",
  "shared.modules.castEfficiency.recommended": ">{0}% is recommended",
  "shared.modules.castEfficiency.suggest": "Try to cast <0/> more often.",
  "shared.modules.features.checklist.allWeaponsEnhanced": "All weapons enhanced (oils/stones)",
  "shared.modules.features.checklist.augmentRune": "Augment rune used",
  "shared.modules.features.checklist.combatPotionEfficiency": "Combat Potion Efficiency",
  "shared.modules.features.checklist.combatPotionsUsed": "Combat potions used",
  "shared.modules.features.checklist.enchanted": "All items enchanted",
  "shared.modules.features.checklist.enchantedHigh": "Using high quality enchants",
  "shared.modules.features.checklist.flask": "Flask used",
  "shared.modules.features.checklist.flaskHigh": "High quality flask used",
  "shared.modules.features.checklist.food": "Food used",
  "shared.modules.features.checklist.foodHigh": "High quality food used",
  "shared.modules.features.checklist.highQualityCombatPotionsUsed": "High quality combat potions used",
  "shared.modules.features.checklist.highQualityWeaponEnhancements": "Using high quality weapon enhancements",
  "shared.modules.features.checklist.wellPrepared": "Be well prepared",
  "shared.modules.features.checklist.wellPreparedDetails": "Being well prepared with food, flasks, potions and enchants is an easy way to improve your performance.",
  "shared.modules.items.potionChecker.suggestions.potionsUsed": "You used {0} combat {1} during this encounter, but you could have used {2}. {3}",
  "shared.modules.items.potionChecker.suggestions.weakPotion": "You used {0} weak {1}. Use <0/> for better results.",
  "shared.modules.raidHealthTab.chart.title.y": "Total Raid Health",
  "shared.raidHealth.tab.explanation": "The stacked health of your raid to give an idea of the healing intensity. Most progression raid fights the raid will rarely be topped.",
  "shared.raidHealth.tab.title": "Raid health",
  "shared.resourceBreakdown.ability": "Ability",
  "shared.resourceBreakdown.castsHeader": "Casts",
  "shared.resourceBreakdown.generatedHeader": "{resourceName} generated",
  "shared.resourceBreakdown.spentHeader": "{resourceName} spent",
  "shared.resourceBreakdown.total": "Total",
  "shared.resourceBreakdown.wastedHeader": "{resourceName} wasted",
  "shared.resourceBreakdown.wastedHeader.tooltip": "This is the amount of resources that were generated while you were already at cap.",
  "shared.suggestion.recommended.lessThanPercent": "<{0}% is recommended",
  "shared.suggestion.recommended.moreThanPercent": ">{0}% is recommended",
  "shared.suggestions.alwaysBeCasting.activeTime": "{0}% active time",
  "shared.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "shared.suggestions.alwaysBeCasting.recommended": "<{0}% is recommended",
  "shared.suggestions.alwaysBeCasting.suggestion": "Your downtime can be improved. Try to Always Be Casting (ABC), avoid delays between casting spells and cast instant spells when you have to move.",
  "shared.suggestions.alwaysBeCastingHealing.timeSpentHealing": "{0}% time spent healing",
  "shared.suggestions.aoeSpells.efficiency": "{0} total hits",
  "shared.suggestions.deathTracker.deathTime": "You were dead for {0}% of the fight",
  "shared.suggestions.deathTracker.recommended": "0% is recommended",
  "shared.suggestions.dots.badDeepWoundsRefreshes": "{0}% of good Deep Wounds refreshes.",
  "shared.suggestions.dots.badRefreshes": "{0}% bad dot refreshes",
  "shared.suggestions.dots.badRendRefreshes": "{0}% of good Rend refreshes.",
  "shared.suggestions.dots.countEarlyRefreshes": "{0}% effective duration",
  "shared.suggestions.dots.earlyRefreshes": "{0}% effective refresh duration",
  "shared.suggestions.efficiency": "efficiency",
  "shared.suggestions.mana.efficiency": "mana left",
  "shared.suggestions.resources.wasted": "{0}% wasted. Generated {1} out of {maxGenerated} possible {resourceNameLower}",
  "shared.weaponEnhancementChecker.guide.noEnhancement.label": "Your {slotName} is missing a weapon enhancement (rune/sharpening stone/weightstone). Apply an enhancement to very easily increase your throughput slightly.",
  "shared.weaponEnhancementChecker.guide.noEnhancement.labelWithRecommendation": "Your {slotName} is missing a weapon enhancement (rune/sharpening stone/weightstone). Apply an enhancement to very easily increase your throughput slightly. Recommended: {recommendedEnhancementList}",
  "shared.weaponEnhancementChecker.guide.strongEnhancement.label": "Your {slotName} has a strong enhancement ({currentEnhancementContent}). Good work!",
  "shared.weaponEnhancementChecker.guide.strongEnhancement.labelWithRecommendation": "Your {slotName} has a strong enhancement ({currentEnhancementContent}) but these are recommended: {recommendedEnhancementList}",
  "shared.weaponEnhancementChecker.guide.weakEnhancement.label": "Your {slotName} has a cheap weapon enhancement ({currentEnhancementContent}). Apply a strong enhancement to very easily increase your throughput slightly.",
  "shared.weaponEnhancementChecker.guide.weakEnhancement.labelWithRecommendation": "Your {slotName} has a cheap weapon enhancement ({0}) . Apply a strong enhancement to very easily increase your throughput slightly. Recommended: {recommendedEnhancementList}",
  "shared.weaponEnhancementChecker.suggestions.noWeaponEnhancement.label": "Your <0>{slotName}</0> is missing a weapon enhancement ({0}). Apply an enhancement to very easily increase your throughput slightly.",
  "shared.weaponEnhancementChecker.suggestions.weakWeaponEnhancement.label": "Your <0>{slotName}</0> has a cheap weapon enhancement ({0}). Apply a strong enhancement to very easily increase your throughput slightly.",
  "shared.weaponEnhancementChecker.weaponEnhancementExamples": "oil, whetstone, or weightstone",
  "specs.affliction": "Affliction",
  "specs.arms": "Arms",
  "specs.assassination": "Assassination",
  "specs.augmentation": "Augmentation",
  "specs.balance": "Balance",
  "specs.beastMastery": "Beast Mastery",
  "specs.blood": "Blood",
  "specs.brewmaster": "Brewmaster",
  "specs.combat": "Combat",
  "specs.deathKnight": "Death Knight",
  "specs.demonHunter": "Demon Hunter",
  "specs.demonology": "Demonology",
  "specs.destruction": "Destruction",
  "specs.devastation": "Devastation",
  "specs.discipline": "Discipline",
  "specs.druid": "Druid",
  "specs.elemental": "Elemental",
  "specs.enhancement": "Enhancement",
  "specs.evoker": "Evoker",
  "specs.feral": "Feral",
  "specs.fire": "Fire",
  "specs.frost": "Frost",
  "specs.fury": "Fury",
  "specs.guardian": "Guardian",
  "specs.havoc": "Havoc",
  "specs.holy": "Holy",
  "specs.hunter": "Hunter",
  "specs.mage": "Mage",
  "specs.mage.arcane": "Arcane",
  "specs.marksmanship": "Marksmanship",
  "specs.mistweaver": "Mistweaver",
  "specs.monk": "Monk",
  "specs.outlaw": "Outlaw",
  "specs.paladin": "Paladin",
  "specs.preservation": "Preservation",
  "specs.priest": "Priest",
  "specs.protection": "Protection",
  "specs.restoration": "Restoration",
  "specs.retribution": "Retribution",
  "specs.rogue": "Rogue",
  "specs.shadow": "Shadow",
  "specs.shaman": "Shaman",
  "specs.subtlety": "Subtlety",
  "specs.survival": "Survival",
  "specs.unholy": "Unholy",
  "specs.vengeance": "Vengeance",
  "specs.warlock": "Warlock",
  "specs.warrior": "Warrior",
  "specs.windwalker": "Windwalker",
  "supportCheckerIssue.specChangelog": "Spec changelog",
  "tbc.suggestions.hunter.growl": "Your pet cast <0/>. You should not cast it when playing with a tank to avoid your pet from taking aggro. In addition, casting <1/> costs energy, which may reduce your pet's DPS.",
  "tbc.suggestions.hunter.lowRankSpellsPet": "Your pet cast a lower rank <0/>. You should teach your pet the max rank <1/>. See <2>Petopia</2> for info on where to learn the max rank pet abilities.",
  "tbc.suggestions.lowRankSpells": "You cast a lower rank <0/>. You should use the max rank <1/> instead.",
  "uVIEgZ": "{0, plural, one {was} other {were}}",
  "warlock.affliction.suggestions.agony.uptime": "{0}% Agony uptime",
  "warlock.affliction.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warlock.affliction.suggestions.corruption.uptime": "{0}% Corruption uptime",
  "warlock.affliction.suggestions.drainSoul.mobsSniped": "{0} % of mobs sniped.",
  "warlock.affliction.suggestions.haunt.uptime": "{0}% Haunt uptime.",
  "warlock.affliction.suggestions.shadowembrace.uptime": "{0}% Shadow Embrace uptime",
  "warlock.affliction.suggestions.siphonLife.uptime": "{0}% Siphon Life uptime",
  "warlock.affliction.suggestions.soulShards.wastedPerMinute": "{0} Soul Shards wasted ({1} per minute)",
  "warlock.affliction.suggestions.unstableAffliction.uptime": "{0}% Unstable Affliction uptime.",
  "warlock.demonology.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warlock.demonology.suggestions.demonicCalling.wastedProcsPerMinute": "{0} wasted procs per minute",
  "warlock.demonology.suggestions.doom.uptime": "{0}% Doom uptime",
  "warlock.demonology.suggestions.felstorm.casts": "{0} out of {1} ({2} %) Felstorm casts.",
  "warlock.demonology.suggestions.legionStrike.casts": "{actual} Legion Strike casts",
  "warlock.demonology.suggestions.soulShards.wastedPerMinutes": "{shardsWasted} Soul Shards wasted ({0} per minute)",
  "warlock.destruction.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warlock.destruction.suggestions.backdraft.wastedPerMinute": "{0} wasted Backdraft stacks per minute",
  "warlock.destruction.suggestions.eradication.uptime": "{0}% Eradication uptime",
  "warlock.destruction.suggestions.immolate.uptime": "{0}% Immolate uptime",
  "warlock.destruction.suggestions.soulShard.wastedPerMinute": "{fragmentsWasted} Soul Shard Fragments wasted ({0} per minute)",
  "warlock.shared.suggestions.grimoireOfSacrifice.uptime": "{0} % Grimoire of Sacrifice uptime.",
  "warlock.wotlk.checklist.maintainCurse": "Maintain a curse on the primary target",
  "warlock.wotlk.checklist.maintainCurse.description": "It is important to maintain a curse on the primary target. If there is no Unholy DK (applying <0>Ebon Plague</0>) or Moonkin (applying <1>Earth and Moon</1>) in the raid, use <2>{curseOfTheElements}</2>. After the priority curse consideration, use <3>{curseOfDoom}</3> for a target alive more than a minute or <4>{curseOfAgony}</4> for a target alive less than a minute.",
  "warlock.wotlk.shared.curses.curseOfAgony": "Curse of Elements",
  "warlock.wotlk.shared.curses.curseOfDoom": "Curse of Doom",
  "warlock.wotlk.shared.curses.curseOfElements": "Curse of Elements",
  "warlock.wotlk.suggestions.curse.description": "Your curse uptime can be improved.",
  "warlock.wotlk.suggestions.curse.uptime": "{0}% Curse uptime",
  "warrior.arms.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warrior.arms.suggestions.bladestorm.efficiency": "Bladestorm was used incorrectly  {0}% of the time.",
  "warrior.arms.suggestions.deepWounds.uptime": "{0}% Deep Wounds uptime",
  "warrior.arms.suggestions.defensiveStance": "A total of {0} of your damage has been reduced compared to {1} of the damage from the boss.",
  "warrior.arms.suggestions.mortalStrike.efficiency": "Mortal Strike was cast {0} times accounting for {1}% of the total possible casts of Mortal Strike.",
  "warrior.arms.suggestions.overpower.stacksWasted": "{0}% of Overpower stacks were wasted.",
  "warrior.arms.suggestions.rage.wasted": "{0}% wasted",
  "warrior.arms.suggestions.rend.uptime": "{0}% Rend uptime",
  "warrior.arms.suggestions.slam.efficiency": "Slam was cast {0} times accounting for {1}% of total casts, while Mortal Strike or Execute was available.",
  "warrior.arms.suggestions.sweepingStrikes.efficiency": "Sweeping Strikes was used {0}% of the time shortly after Colossus Smash/Warbreaker.",
  "warrior.fury.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warrior.fury.suggestions.enrage.uptime": "{0}% Enrage uptime",
  "warrior.fury.suggestions.rage.wasted": "{0}% wasted",
  "warrior.fury.suggestions.rampages.missed": "{actual} missed Rampages.",
  "warrior.fury.suggestions.whirlwind.badCasts": "{0}% of bad Whirlwind casts",
  "warrior.protection.suggestions.alwaysBeCasting.downtime": "{0}% downtime",
  "warrior.protection.suggestions.block.damageMitigated": "{0}% was mitigated by a block spell",
  "warrior.protection.suggestions.boominVoice.rage.wasted": "{actual} Rage wasted",
  "warrior.protection.suggestions.heavyRepercussions.shieldBlockCasts": "{0}% cast during Shield Block",
  "warrior.protection.suggestions.rage.wasted": "{0}% wasted",
  "warrior.protection.suggestions.shieldBlock.goodCasts": "{0} good casts of shield block",
  "warrior.protection.suggestions.shieldSlam.casts": "{0} shield slam casts",
  "warrior.protection.suggestions.spellReflect.efficiency": "{0} % magic damage With Spell Reflect Up"
}
